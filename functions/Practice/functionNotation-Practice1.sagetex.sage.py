## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file functionNotation-Practice1.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_201 = Integer(201); _sage_const_28 = Integer(28); _sage_const_29 = Integer(29); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_26 = Integer(26); _sage_const_27 = Integer(27); _sage_const_24 = Integer(24); _sage_const_25 = Integer(25); _sage_const_135 = Integer(135); _sage_const_134 = Integer(134); _sage_const_136 = Integer(136); _sage_const_89 = Integer(89); _sage_const_133 = Integer(133); _sage_const_132 = Integer(132); _sage_const_113 = Integer(113); _sage_const_112 = Integer(112); _sage_const_111 = Integer(111); _sage_const_114 = Integer(114); _sage_const_33 = Integer(33); _sage_const_179 = Integer(179); _sage_const_178 = Integer(178); _sage_const_193 = Integer(193); _sage_const_211 = Integer(211); _sage_const_212 = Integer(212); _sage_const_213 = Integer(213); _sage_const_214 = Integer(214); _sage_const_180 = Integer(180); _sage_const_199 = Integer(199); _sage_const_198 = Integer(198); _sage_const_32 = Integer(32); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_31 = Integer(31); _sage_const_30 = Integer(30); _sage_const_19 = Integer(19); _sage_const_18 = Integer(18); _sage_const_35 = Integer(35); _sage_const_34 = Integer(34); _sage_const_37 = Integer(37); _sage_const_36 = Integer(36); _sage_const_39 = Integer(39); _sage_const_99 = Integer(99); _sage_const_181 = Integer(181); _sage_const_127 = Integer(127); _sage_const_168 = Integer(168); _sage_const_38 = Integer(38); _sage_const_100 = Integer(100); _sage_const_101 = Integer(101); _sage_const_102 = Integer(102); _sage_const_165 = Integer(165); _sage_const_200 = Integer(200); _sage_const_160 = Integer(160); _sage_const_94 = Integer(94); _sage_const_145 = Integer(145); _sage_const_146 = Integer(146); _sage_const_147 = Integer(147); _sage_const_167 = Integer(167); _sage_const_166 = Integer(166); _sage_const_148 = Integer(148)## This file (functionNotation-Practice1.sagetex.sage) was *autogenerated* from functionNotation-Practice1.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('functionNotation-Practice1', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_1 
_st_.blockbegin()
try:
 
 ######  Define a function to convert a sage number into a saved counter number.
 
 #####Define default Sage variables.
 #Default function variables
 var('x,y,z,X,Y,Z')
 #Default function names
 var('f,g,h,dx,dy,dz,dh,df')
 #Default Wild cards
 w0 = SR.wild(_sage_const_0 )
 
 def higherRoot(rootVal,rootArg):
     # Note that this returns a String version of the latex higher root in root form, rather than exponential form.
     rootString = LatexExpr(r'\sqrt[' + rootVal.str() + ']{' + rootArg.str() +'}')
     return rootString
 
 
 def DispSign(b):
     """ Returns the string of the 'signed' version of `b`, e.g. 3 -> "+3", -3 -> "-3", 0 -> "".
     """
     if b == _sage_const_0 :
         return ""
     elif b > _sage_const_0 :
         return "+" + str(b)
     elif b < _sage_const_0 :
         return str(b)
     else:
         # If we're here, then something has gone wrong.
         raise ValueError
 
 def ISP(b):
     return DispSign(b)
 
 def NoEval(f, c):
     # TODO
     """ Returns a non-evaluted version of the result f(c).
     """
     cStr = str(c)
     # fLatex = latex(f)
     fString = latex(f)
     fStrList = list(fString)
     length = len(fStrList)
     fStrList2 = range(length)
     for i in range(_sage_const_0 , length):
         if fStrList[i] == "x":
             fStrList2[i] = "("+cstr+")"
         else:
             fStrList2[i] = fStrList[i]
     f2 = join(fStrList2,"")
     return LatexExpr(f2)
 
 def HyperSimp(f):
     """ Returns the expression `f` without hyperbolic expressions.
     """
     subsDict = {
         sinh(w0) : (exp(w0) - exp(-w0))/_sage_const_2 ,
         cosh(w0) : (exp(w0) + exp(-w0))/_sage_const_2 ,
         tanh(w0) : (exp(w0) - exp(-w0))/(exp(w0) + exp(-w0)),
         sech(w0) : _sage_const_2 /(exp(w0) + exp(-w0)),                      # This seems to work, but Nowell said it didn't at one point.
         csch(w0) : _sage_const_2 /(exp(w0) - exp(-w0)),                      # This seems to work, but Nowell said it didn't at one point.
         coth(w0) : (exp(w0) + exp(-w0))/(exp(w0) - exp(-w0)),   # This seems to work, but Nowell said it didn't at one point.
         arcsinh(w0) :       ln( w0 + sqrt((w0)**_sage_const_2  + _sage_const_1 ) ),
         arccosh(w0) :       ln( w0 + sqrt((w0)**_sage_const_2  - _sage_const_1 ) ),
         arctanh(w0) : _sage_const_1 /_sage_const_2  * ln( (_sage_const_1  + w0) / (_sage_const_1  - w0) ),
         arccsch(w0) :       ln( (_sage_const_1  + sqrt((w0)**_sage_const_2  + _sage_const_1 ))/w0 ),
         arcsech(w0) :       ln( (_sage_const_1  + sqrt(_sage_const_1  - (w0)**_sage_const_2 ))/w0 ),
         arccoth(w0) : _sage_const_1 /_sage_const_2  * ln( (_sage_const_1  + w0) / (w0 - _sage_const_1 ) )
     }
     g = f.substitute(subsDict)
     return simplify(g)
 
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 def RandVector(b, c, avoid=[], rep=_sage_const_1 ):
     """ Returns essentially a multiset permutation of ([b,c]-av) * rep.
         That is, a vector which contains each integer in [`b`,`c`] which is not in `av` a total of `rep` number of times.
         Example:
         sage: RandVector(1,3, [2], 2)
         [3, 1, 1, 3]
     """
     oneVec = [val for val in range(b,c+_sage_const_1 ) if val not in avoid]
     vec = oneVec * rep
     shuffle(vec)
     return vec
 
 
 def fudge(b):
     up = b+RandInt(_sage_const_2 ,_sage_const_5 )/_sage_const_10 
     down = b-RandInt(_sage_const_2 ,_sage_const_5 )/_sage_const_10 
     fudgebup = round(up,_sage_const_1 )
     fudgebdown = round(down,_sage_const_1 )
     fudgedb = [fudgebdown,fudgebup]
     return fudgedb
 
 def disjointCheck(checkvec):
     if len(uniq(checkvec)) < len(checkvec):
         return _sage_const_1 
     else:
         return _sage_const_0 
 
 def disjointIntervals(IntStart,IntEnd,CheckVal):
     if IntStart < CheckVal and CheckVal < IntEnd:
         return _sage_const_1 
     else:
         return _sage_const_0 
 
 def IntervalVecCheck(checkVec):
     veclen = len(checkVec)
     returnval = _sage_const_0 
     for i in range(veclen):
         for j in range(veclen):
             if (disjointIntervals(checkVec[j][_sage_const_0 ],checkVec[j][_sage_const_1 ],checkVec[i][_sage_const_0 ]) + disjointIntervals(checkVec[j][_sage_const_0 ],checkVec[j][_sage_const_1 ],checkVec[i][_sage_const_1 ])) > _sage_const_0 :
                 returnval = returnval + _sage_const_1 
     if returnval > _sage_const_0 :
         return _sage_const_1 
     else:
         return _sage_const_0 
 
 
 
 
except:
 _st_.goboom(_sage_const_136 )
_st_.blockend()
_st_.current_tex_line = _sage_const_12 
_st_.blockbegin()
try:
 #### Start of problem p1
 p1c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p1c2 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[p1c1])
 p1domvec = [ 'x' + LatexExpr(r"\leq") + str(p1c1), str(x < p1c1), 'x' + LatexExpr(r"\geq") + str(p1c1), str(x > p1c1) ]
 p1codomvec = [ 'x' + LatexExpr(r"\leq") + str(p1c2), str(x < p1c2), 'x' + LatexExpr(r"\geq") + str(p1c2), str(x > p1c2) ]
 
 p1dompick =RandInt(_sage_const_0 ,_sage_const_3 )
 p1codompick = NonZeroInt(_sage_const_0 ,_sage_const_3 ,[p1dompick])
 
 p1var1 = p1domvec[p1dompick]
 p1var2 = p1codomvec[p1codompick]
 
 p1ans1 = p1domvec[p1dompick]
 p1ans2 = p1codomvec[p1codompick]
 p1ans3 = p1domvec[_sage_const_3  - p1dompick]
 p1ans4 = p1codomvec[_sage_const_3  - p1codompick]
 
 
 #### Start of problem p2
 p2c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p2c2 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[p2c1])
 
 p2domvec = [ 'x' + LatexExpr(r"\leq") + str(p2c1), str(x < p2c1), 'x' + LatexExpr(r"\geq") + str(p2c1), str(x > p2c1) ]
 p2codomvec = [ 'x' + LatexExpr(r"\leq") + str(p2c2), str(x < p2c2), 'x' + LatexExpr(r"\geq") + str(p2c2), str(x > p2c2) ]
 
 p2dompick =RandInt(_sage_const_0 ,_sage_const_3 )
 p2codompick = NonZeroInt(_sage_const_0 ,_sage_const_3 ,[p2dompick])
 
 p2var1 = p2domvec[p2dompick]
 p2var2 = p2codomvec[p2codompick]
 
 p2ans1 = p2domvec[p2dompick]
 p2ans2 = p2codomvec[p2codompick]
 p2ans3 = p2domvec[_sage_const_3  - p2dompick]
 p2ans4 = p2codomvec[_sage_const_3  - p2codompick]
 
 
 #### Start of problem p3
 p3c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p3c2 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[p3c1])
 p3domvec = [ 'x' + LatexExpr(r"\leq") + str(p3c1), str(x < p3c1), 'x' + LatexExpr(r"\geq") + str(p3c1), str(x > p3c1) ]
 p3codomvec = [ 'x' + LatexExpr(r"\leq") + str(p3c2), str(x < p3c2), 'x' + LatexExpr(r"\geq") + str(p3c2), str(x > p3c2) ]
 
 p3dompick =RandInt(_sage_const_0 ,_sage_const_3 )
 p3codompick = NonZeroInt(_sage_const_0 ,_sage_const_3 ,[p3dompick])
 
 p3var1 = p3domvec[p3dompick]
 p3var2 = p3codomvec[p3codompick]
 
 p3ans1 = p3domvec[p3dompick]
 p3ans2 = p3codomvec[p3codompick]
 p3ans3 = p3domvec[_sage_const_3  - p3dompick]
 p3ans4 = p3codomvec[_sage_const_3  - p3codompick]
 
 
 #### Start of problem p4
 p4c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p4c2 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[p4c1])
 p4domvec = [ 'x' + LatexExpr(r"\leq") + str(p4c1), str(x < p4c1), 'x' + LatexExpr(r"\geq") + str(p4c1), str(x > p4c1) ]
 p4codomvec = [ 'x' + LatexExpr(r"\leq") + str(p4c2), str(x < p4c2), 'x' + LatexExpr(r"\geq") + str(p4c2), str(x > p4c2) ]
 
 
 p4dompick =RandInt(_sage_const_0 ,_sage_const_3 )
 p4codompick = NonZeroInt(_sage_const_0 ,_sage_const_3 ,[p4dompick])
 
 p4var1 = p4domvec[p4dompick]
 p4var2 = p4codomvec[p4codompick]
 
 p4ans1 = p4domvec[p4dompick]
 p4ans2 = p4codomvec[p4codompick]
 p4ans3 = p4domvec[_sage_const_3  - p4dompick]
 p4ans4 = p4codomvec[_sage_const_3  - p4codompick]
 
 
 
 
except:
 _st_.goboom(_sage_const_89 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_94 
 _st_.inline(_sage_const_0 , latex(p1var1))
except:
 _st_.goboom(_sage_const_94 )
try:
 _st_.current_tex_line = _sage_const_94 
 _st_.inline(_sage_const_1 , latex(p1var2))
except:
 _st_.goboom(_sage_const_94 )
try:
 _st_.current_tex_line = _sage_const_99 
 _st_.inline(_sage_const_2 , latex(p1ans1))
except:
 _st_.goboom(_sage_const_99 )
try:
 _st_.current_tex_line = _sage_const_100 
 _st_.inline(_sage_const_3 , latex(p1ans2))
except:
 _st_.goboom(_sage_const_100 )
try:
 _st_.current_tex_line = _sage_const_101 
 _st_.inline(_sage_const_4 , latex(p1ans3))
except:
 _st_.goboom(_sage_const_101 )
try:
 _st_.current_tex_line = _sage_const_102 
 _st_.inline(_sage_const_5 , latex(p1ans4))
except:
 _st_.goboom(_sage_const_102 )
try:
 _st_.current_tex_line = _sage_const_111 
 _st_.inline(_sage_const_6 , latex(p1ans1))
except:
 _st_.goboom(_sage_const_111 )
try:
 _st_.current_tex_line = _sage_const_112 
 _st_.inline(_sage_const_7 , latex(p1ans2))
except:
 _st_.goboom(_sage_const_112 )
try:
 _st_.current_tex_line = _sage_const_113 
 _st_.inline(_sage_const_8 , latex(p1ans3))
except:
 _st_.goboom(_sage_const_113 )
try:
 _st_.current_tex_line = _sage_const_114 
 _st_.inline(_sage_const_9 , latex(p1ans4))
except:
 _st_.goboom(_sage_const_114 )
try:
 _st_.current_tex_line = _sage_const_127 
 _st_.inline(_sage_const_10 , latex(p2var1))
except:
 _st_.goboom(_sage_const_127 )
try:
 _st_.current_tex_line = _sage_const_127 
 _st_.inline(_sage_const_11 , latex(p2var2))
except:
 _st_.goboom(_sage_const_127 )
try:
 _st_.current_tex_line = _sage_const_132 
 _st_.inline(_sage_const_12 , latex(p2ans1))
except:
 _st_.goboom(_sage_const_132 )
try:
 _st_.current_tex_line = _sage_const_133 
 _st_.inline(_sage_const_13 , latex(p2ans2))
except:
 _st_.goboom(_sage_const_133 )
try:
 _st_.current_tex_line = _sage_const_134 
 _st_.inline(_sage_const_14 , latex(p2ans3))
except:
 _st_.goboom(_sage_const_134 )
try:
 _st_.current_tex_line = _sage_const_135 
 _st_.inline(_sage_const_15 , latex(p2ans4))
except:
 _st_.goboom(_sage_const_135 )
try:
 _st_.current_tex_line = _sage_const_145 
 _st_.inline(_sage_const_16 , latex(p2ans1))
except:
 _st_.goboom(_sage_const_145 )
try:
 _st_.current_tex_line = _sage_const_146 
 _st_.inline(_sage_const_17 , latex(p2ans2))
except:
 _st_.goboom(_sage_const_146 )
try:
 _st_.current_tex_line = _sage_const_147 
 _st_.inline(_sage_const_18 , latex(p2ans3))
except:
 _st_.goboom(_sage_const_147 )
try:
 _st_.current_tex_line = _sage_const_148 
 _st_.inline(_sage_const_19 , latex(p2ans4))
except:
 _st_.goboom(_sage_const_148 )
try:
 _st_.current_tex_line = _sage_const_160 
 _st_.inline(_sage_const_20 , latex(p3var1))
except:
 _st_.goboom(_sage_const_160 )
try:
 _st_.current_tex_line = _sage_const_160 
 _st_.inline(_sage_const_21 , latex(p3var2))
except:
 _st_.goboom(_sage_const_160 )
try:
 _st_.current_tex_line = _sage_const_165 
 _st_.inline(_sage_const_22 , latex(p3ans1))
except:
 _st_.goboom(_sage_const_165 )
try:
 _st_.current_tex_line = _sage_const_166 
 _st_.inline(_sage_const_23 , latex(p3ans2))
except:
 _st_.goboom(_sage_const_166 )
try:
 _st_.current_tex_line = _sage_const_167 
 _st_.inline(_sage_const_24 , latex(p3ans3))
except:
 _st_.goboom(_sage_const_167 )
try:
 _st_.current_tex_line = _sage_const_168 
 _st_.inline(_sage_const_25 , latex(p3ans4))
except:
 _st_.goboom(_sage_const_168 )
try:
 _st_.current_tex_line = _sage_const_178 
 _st_.inline(_sage_const_26 , latex(p3ans1))
except:
 _st_.goboom(_sage_const_178 )
try:
 _st_.current_tex_line = _sage_const_179 
 _st_.inline(_sage_const_27 , latex(p3ans2))
except:
 _st_.goboom(_sage_const_179 )
try:
 _st_.current_tex_line = _sage_const_180 
 _st_.inline(_sage_const_28 , latex(p3ans3))
except:
 _st_.goboom(_sage_const_180 )
try:
 _st_.current_tex_line = _sage_const_181 
 _st_.inline(_sage_const_29 , latex(p3ans4))
except:
 _st_.goboom(_sage_const_181 )
try:
 _st_.current_tex_line = _sage_const_193 
 _st_.inline(_sage_const_30 , latex(p4var1))
except:
 _st_.goboom(_sage_const_193 )
try:
 _st_.current_tex_line = _sage_const_193 
 _st_.inline(_sage_const_31 , latex(p4var2))
except:
 _st_.goboom(_sage_const_193 )
try:
 _st_.current_tex_line = _sage_const_198 
 _st_.inline(_sage_const_32 , latex(p4ans1))
except:
 _st_.goboom(_sage_const_198 )
try:
 _st_.current_tex_line = _sage_const_199 
 _st_.inline(_sage_const_33 , latex(p4ans2))
except:
 _st_.goboom(_sage_const_199 )
try:
 _st_.current_tex_line = _sage_const_200 
 _st_.inline(_sage_const_34 , latex(p4ans3))
except:
 _st_.goboom(_sage_const_200 )
try:
 _st_.current_tex_line = _sage_const_201 
 _st_.inline(_sage_const_35 , latex(p4ans4))
except:
 _st_.goboom(_sage_const_201 )
try:
 _st_.current_tex_line = _sage_const_211 
 _st_.inline(_sage_const_36 , latex(p4ans1))
except:
 _st_.goboom(_sage_const_211 )
try:
 _st_.current_tex_line = _sage_const_212 
 _st_.inline(_sage_const_37 , latex(p4ans2))
except:
 _st_.goboom(_sage_const_212 )
try:
 _st_.current_tex_line = _sage_const_213 
 _st_.inline(_sage_const_38 , latex(p4ans3))
except:
 _st_.goboom(_sage_const_213 )
try:
 _st_.current_tex_line = _sage_const_214 
 _st_.inline(_sage_const_39 , latex(p4ans4))
except:
 _st_.goboom(_sage_const_214 )
_st_.endofdoc()

