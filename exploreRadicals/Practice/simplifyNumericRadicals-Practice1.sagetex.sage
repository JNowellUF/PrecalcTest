## -*- encoding: utf-8 -*-
## This file (simplifyNumericRadicals-Practice1.sagetex.sage) was *autogenerated* from simplifyNumericRadicals-Practice1.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('simplifyNumericRadicals-Practice1', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = 1
_st_.blockbegin()
try:
 
 ######  Define a function to convert a sage number into a saved counter number.
 
 #####Define default Sage variables.
 #Default function variables
 var('x,y,z,X,Y,Z')
 #Default function names
 var('f,g,h,dx,dy,dz,dh,df')
 #Default Wild cards
 w0 = SR.wild(0)
 
 def higherRoot(rootVal,rootArg):
     # Note that this returns a String version of the latex higher root in root form, rather than exponential form.
     rootString = LatexExpr(r'\sqrt[' + rootVal.str() + ']{' + rootArg.str() +'}')
     return rootString
 
 
 def DispSign(b):
     """ Returns the string of the 'signed' version of `b`, e.g. 3 -> "+3", -3 -> "-3", 0 -> "".
     """
     if b == 0:
         return ""
     elif b > 0:
         return "+" + str(b)
     elif b < 0:
         return str(b)
     else:
         # If we're here, then something has gone wrong.
         raise ValueError
 
 def ISP(b):
     return DispSign(b)
 
 def NoEval(f, c):
     # TODO
     """ Returns a non-evaluted version of the result f(c).
     """
     cStr = str(c)
     # fLatex = latex(f)
     fString = latex(f)
     fStrList = list(fString)
     length = len(fStrList)
     fStrList2 = range(length)
     for i in range(0, length):
         if fStrList[i] == "x":
             fStrList2[i] = "("+cstr+")"
         else:
             fStrList2[i] = fStrList[i]
     f2 = join(fStrList2,"")
     return LatexExpr(f2)
 
 def HyperSimp(f):
     """ Returns the expression `f` without hyperbolic expressions.
     """
     subsDict = {
         sinh(w0) : (exp(w0) - exp(-w0))/2,
         cosh(w0) : (exp(w0) + exp(-w0))/2,
         tanh(w0) : (exp(w0) - exp(-w0))/(exp(w0) + exp(-w0)),
         sech(w0) : 2/(exp(w0) + exp(-w0)),                      # This seems to work, but Nowell said it didn't at one point.
         csch(w0) : 2/(exp(w0) - exp(-w0)),                      # This seems to work, but Nowell said it didn't at one point.
         coth(w0) : (exp(w0) + exp(-w0))/(exp(w0) - exp(-w0)),   # This seems to work, but Nowell said it didn't at one point.
         arcsinh(w0) :       ln( w0 + sqrt((w0)^2 + 1) ),
         arccosh(w0) :       ln( w0 + sqrt((w0)^2 - 1) ),
         arctanh(w0) : 1/2 * ln( (1 + w0) / (1 - w0) ),
         arccsch(w0) :       ln( (1 + sqrt((w0)^2 + 1))/w0 ),
         arcsech(w0) :       ln( (1 + sqrt(1 - (w0)^2))/w0 ),
         arccoth(w0) : 1/2 * ln( (1 + w0) / (w0 - 1) )
     }
     g = f.substitute(subsDict)
     return simplify(g)
 
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [0]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 def RandVector(b, c, avoid=[], rep=1):
     """ Returns essentially a multiset permutation of ([b,c]-av) * rep.
         That is, a vector which contains each integer in [`b`,`c`] which is not in `av` a total of `rep` number of times.
         Example:
         sage: RandVector(1,3, [2], 2)
         [3, 1, 1, 3]
     """
     oneVec = [val for val in range(b,c+1) if val not in avoid]
     vec = oneVec * rep
     shuffle(vec)
     return vec
 
 
 def fudge(b):
     up = b+RandInt(2,5)/10
     down = b-RandInt(2,5)/10
     fudgebup = round(up,1)
     fudgebdown = round(down,1)
     fudgedb = [fudgebdown,fudgebup]
     return fudgedb
 
 def disjointCheck(checkvec):
     if len(uniq(checkvec)) < len(checkvec):
         return 1
     else:
         return 0
 
 def disjointIntervals(IntStart,IntEnd,CheckVal):
     if IntStart < CheckVal and CheckVal < IntEnd:
         return 1
     else:
         return 0
 
 def IntervalVecCheck(checkVec):
     veclen = len(checkVec)
     returnval = 0
     for i in range(veclen):
         for j in range(veclen):
             if (disjointIntervals(checkVec[j][0],checkVec[j][1],checkVec[i][0]) + disjointIntervals(checkVec[j][0],checkVec[j][1],checkVec[i][1])) > 0:
                 returnval = returnval + 1
     if returnval > 0:
         return 1
     else:
         return 0
 
 
 
 
except:
 _st_.goboom(136)
_st_.blockend()
_st_.current_tex_line = 9
_st_.blockbegin()
try:
 primevec = [2,3,5,7,11,13,17]
 
 ###### Problem p1
 p1rad = 99999999
 while p1rad > 10000000:
     #How many of each base evenly factor out
     p1c1 = RandInt(0,2)
     p1c2 = RandInt(0,2)
     p1c3 = RandInt(0,2)
 
     #Degree of the root
     p1root1 = RandInt(2,5)
 
     #How many of each base stay within the radical
     p1c4 = RandInt(0,p1root1-1)
     p1c5 = RandInt(0,p1root1-1)
     p1c6 = RandInt(0,p1root1-1)
 
     #Choose the primes that comprise the radicand
     p1pick1 = RandInt(0,6)
     p1pick2 = NonZeroInt(0,6,[p1pick1])
     p1pick3 = NonZeroInt(0,6,[p1pick1,p1pick2])
     p1b1 = primevec[p1pick1]
     p1b2 = primevec[p1pick2]
     p1b3 = primevec[p1pick3]
 
     #Build the radicand
     p1fac1 = p1b1^(p1c1*p1root1)
     p1fac2 = p1b2^(p1c2*p1root1)
     p1fac3 = p1b3^(p1c3*p1root1)
 
     p1rad = p1rad = p1fac1*p1fac2*p1fac3*p1b1^p1c4*p1b2^p1c5*p1b3^p1c6
 
 #Build answers
 p1ans1 = p1b1^p1c1*p1b2^p1c2*p1b3^p1c3
 p1ans2 = p1b1^p1c4*p1b2^p1c5*p1b3^p1c6
 
 
 ###### Problem p2
 p2rad = 99999999
 while p2rad > 10000000:
     #How many of each base evenly factor out
     p2c1 = RandInt(0,2)
     p2c2 = RandInt(0,2)
     p2c3 = RandInt(0,2)
 
     #Degree of the root
     p2root1 = RandInt(2,5)
 
     #How many of each base stay within the radical
     p2c4 = RandInt(0,p2root1-1)
     p2c5 = RandInt(0,p2root1-1)
     p2c6 = RandInt(0,p2root1-1)
 
     #Choose the primes that comprise the radicand
     p2pick1 = RandInt(0,6)
     p2pick2 = NonZeroInt(0,6,[p2pick1])
     p2pick3 = NonZeroInt(0,6,[p2pick1,p2pick2])
     p2b1 = primevec[p2pick1]
     p2b2 = primevec[p2pick2]
     p2b3 = primevec[p2pick3]
 
     #Build the radicand
     p2fac1 = p2b1^(p2c1*p2root1)
     p2fac2 = p2b2^(p2c2*p2root1)
     p2fac3 = p2b3^(p2c3*p2root1)
 
     p2rad = p2rad = p2fac1*p2fac2*p2fac3*p2b1^p2c4*p2b2^p2c5*p2b3^p2c6
 
 #Build answers
 p2ans1 = p2b1^p2c1*p2b2^p2c2*p2b3^p2c3
 p2ans2 = p2b1^p2c4*p2b2^p2c5*p2b3^p2c6
 
 
 ###### Problem p3
 p3rad = 99999999
 while p3rad > 10000000:
     #How many of each base evenly factor out
     p3c1 = RandInt(0,2)
     p3c2 = RandInt(0,2)
     p3c3 = RandInt(0,2)
 
     #Degree of the root
     p3root1 = RandInt(2,5)
 
     #How many of each base stay within the radical
     p3c4 = RandInt(0,p3root1-1)
     p3c5 = RandInt(0,p3root1-1)
     p3c6 = RandInt(0,p3root1-1)
 
     #Choose the primes that comprise the radicand
     p3pick1 = RandInt(0,6)
     p3pick2 = NonZeroInt(0,6,[p3pick1])
     p3pick3 = NonZeroInt(0,6,[p3pick1,p3pick2])
     p3b1 = primevec[p3pick1]
     p3b2 = primevec[p3pick2]
     p3b3 = primevec[p3pick3]
 
     #Build the radicand
     p3fac1 = p3b1^(p3c1*p3root1)
     p3fac2 = p3b2^(p3c2*p3root1)
     p3fac3 = p3b3^(p3c3*p3root1)
 
     p3rad = p3rad = p3fac1*p3fac2*p3fac3*p3b1^p3c4*p3b2^p3c5*p3b3^p3c6
 
 #Build answers
 p3ans1 = p3b1^p3c1*p3b2^p3c2*p3b3^p3c3
 p3ans2 = p3b1^p3c4*p3b2^p3c5*p3b3^p3c6
 
 
 ###### Problem p4
 p4rad = 99999999
 while p4rad > 10000000:
     #How many of each base evenly factor out
     p4c1 = RandInt(0,2)
     p4c2 = RandInt(0,2)
     p4c3 = RandInt(0,2)
 
     #Degree of the root
     p4root1 = RandInt(2,5)
 
     #How many of each base stay within the radical
     p4c4 = RandInt(0,p4root1-1)
     p4c5 = RandInt(0,p4root1-1)
     p4c6 = RandInt(0,p4root1-1)
 
     #Choose the primes that comprise the radicand
     p4pick1 = RandInt(0,6)
     p4pick2 = NonZeroInt(0,6,[p4pick1])
     p4pick3 = NonZeroInt(0,6,[p4pick1,p4pick2])
     p4b1 = primevec[p4pick1]
     p4b2 = primevec[p4pick2]
     p4b3 = primevec[p4pick3]
 
     #Build the radicand
     p4fac1 = p4b1^(p4c1*p4root1)
     p4fac2 = p4b2^(p4c2*p4root1)
     p4fac3 = p4b3^(p4c3*p4root1)
 
     p4rad = p4rad = p4fac1*p4fac2*p4fac3*p4b1^p4c4*p4b2^p4c5*p4b3^p4c6
 
 #Build answers
 p4ans1 = p4b1^p4c1*p4b2^p4c2*p4b3^p4c3
 p4ans2 = p4b1^p4c4*p4b2^p4c5*p4b3^p4c6
 
 
 
except:
 _st_.goboom(157)
_st_.blockend()
try:
 _st_.current_tex_line = 162
 _st_.inline(0, latex(p1root1))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(1, latex(p1rad))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(2, latex(p1rad))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(3, latex(p1rad))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(4, latex(p1rad))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(5, latex(p1ans1))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(6, latex(p1root1))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(7, latex(p1ans2))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(8, latex(p1ans2))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(9, latex(p1ans2))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 162
 _st_.inline(10, latex(p1ans2))
except:
 _st_.goboom(162)
try:
 _st_.current_tex_line = 170
 _st_.inline(11, latex(p2root1))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(12, latex(p2rad))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(13, latex(p2rad))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(14, latex(p2rad))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(15, latex(p2rad))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(16, latex(p2ans1))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(17, latex(p2root1))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(18, latex(p2ans2))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(19, latex(p2ans2))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(20, latex(p2ans2))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 170
 _st_.inline(21, latex(p2ans2))
except:
 _st_.goboom(170)
try:
 _st_.current_tex_line = 178
 _st_.inline(22, latex(p3root1))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(23, latex(p3rad))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(24, latex(p3rad))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(25, latex(p3rad))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(26, latex(p3rad))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(27, latex(p3ans1))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(28, latex(p3root1))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(29, latex(p3ans2))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(30, latex(p3ans2))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(31, latex(p3ans2))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 178
 _st_.inline(32, latex(p3ans2))
except:
 _st_.goboom(178)
try:
 _st_.current_tex_line = 186
 _st_.inline(33, latex(p4root1))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(34, latex(p4rad))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(35, latex(p4rad))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(36, latex(p4rad))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(37, latex(p4rad))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(38, latex(p4ans1))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(39, latex(p4root1))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(40, latex(p4ans2))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(41, latex(p4ans2))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(42, latex(p4ans2))
except:
 _st_.goboom(186)
try:
 _st_.current_tex_line = 186
 _st_.inline(43, latex(p4ans2))
except:
 _st_.goboom(186)
_st_.endofdoc()
