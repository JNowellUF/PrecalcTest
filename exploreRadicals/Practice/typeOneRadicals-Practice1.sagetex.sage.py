## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file typeOneRadicals-Practice1.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_88 = Integer(88); _sage_const_89 = Integer(89); _sage_const_84 = Integer(84); _sage_const_85 = Integer(85); _sage_const_86 = Integer(86); _sage_const_87 = Integer(87); _sage_const_80 = Integer(80); _sage_const_81 = Integer(81); _sage_const_82 = Integer(82); _sage_const_83 = Integer(83); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_19 = Integer(19); _sage_const_18 = Integer(18); _sage_const_93 = Integer(93); _sage_const_92 = Integer(92); _sage_const_91 = Integer(91); _sage_const_90 = Integer(90); _sage_const_94 = Integer(94); _sage_const_66 = Integer(66); _sage_const_67 = Integer(67); _sage_const_64 = Integer(64); _sage_const_65 = Integer(65); _sage_const_62 = Integer(62); _sage_const_63 = Integer(63); _sage_const_60 = Integer(60); _sage_const_61 = Integer(61); _sage_const_68 = Integer(68); _sage_const_69 = Integer(69); _sage_const_423 = Integer(423); _sage_const_426 = Integer(426); _sage_const_45 = Integer(45); _sage_const_75 = Integer(75); _sage_const_74 = Integer(74); _sage_const_77 = Integer(77); _sage_const_76 = Integer(76); _sage_const_71 = Integer(71); _sage_const_70 = Integer(70); _sage_const_73 = Integer(73); _sage_const_72 = Integer(72); _sage_const_79 = Integer(79); _sage_const_78 = Integer(78); _sage_const_40 = Integer(40); _sage_const_41 = Integer(41); _sage_const_42 = Integer(42); _sage_const_43 = Integer(43); _sage_const_44 = Integer(44); _sage_const_390 = Integer(390); _sage_const_393 = Integer(393); _sage_const_47 = Integer(47); _sage_const_48 = Integer(48); _sage_const_49 = Integer(49); _sage_const_404 = Integer(404); _sage_const_401 = Integer(401); _sage_const_374 = Integer(374); _sage_const_59 = Integer(59); _sage_const_58 = Integer(58); _sage_const_57 = Integer(57); _sage_const_56 = Integer(56); _sage_const_55 = Integer(55); _sage_const_54 = Integer(54); _sage_const_53 = Integer(53); _sage_const_52 = Integer(52); _sage_const_51 = Integer(51); _sage_const_50 = Integer(50); _sage_const_383 = Integer(383); _sage_const_380 = Integer(380); _sage_const_46 = Integer(46); _sage_const_412 = Integer(412); _sage_const_415 = Integer(415); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_28 = Integer(28); _sage_const_29 = Integer(29); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_26 = Integer(26); _sage_const_27 = Integer(27); _sage_const_24 = Integer(24); _sage_const_25 = Integer(25); _sage_const_39 = Integer(39); _sage_const_38 = Integer(38); _sage_const_31 = Integer(31); _sage_const_30 = Integer(30); _sage_const_33 = Integer(33); _sage_const_32 = Integer(32); _sage_const_35 = Integer(35); _sage_const_34 = Integer(34); _sage_const_37 = Integer(37); _sage_const_36 = Integer(36)## This file (typeOneRadicals-Practice1.sagetex.sage) was *autogenerated* from typeOneRadicals-Practice1.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('typeOneRadicals-Practice1', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_8 
_st_.blockbegin()
try:
 var('x')
 
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 
 #### Note: Because Sage does everything in the complex plane,
 #           it cannot be trusted to simplify radicals in any sane way for a precalc student.
 #           Thus we will need to manually build out the correct answer.
 
 ###### Problem p1
 ### Decide on the root value.
 p1rootVal = _sage_const_2 *RandInt(_sage_const_1 ,_sage_const_4 )+_sage_const_1 # They haven't discussed even roots yielding absolute value signs yet, so let's only give them odds for now.
 
 ### Build coefficients. In order to avoid crazy leading coefficients it is useful to ensure that there are no common factors. Start with a baseline of 2 all around, then redefine them to have properties we want.
 p1c1 = _sage_const_2 
 p1c2 = _sage_const_2 
 p1c3 = _sage_const_2 
 p1c4 = _sage_const_2 
 p1c5 = _sage_const_2 
 p1c6 = _sage_const_2 
 p1c7 = _sage_const_2 
 p1c8 = _sage_const_2 
 
 # We will ensure GCD = 1 to avoid a common factor from being pulled out of the factor (ax-b)^n and get crazy leading coefficient.
 # We will also force the leading coefficients of each factor to be different, which will force each factor to stay independent and not merge into one factor when computed. This follows due to the relatively prime aspect of the a,b in (ax-b)^n forms.
 while gcd(p1c1,p1c2)>_sage_const_1 :
     p1c1 = RandInt(_sage_const_1 ,_sage_const_9 )
     p1c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p1c3,p1c4)>_sage_const_1 :
     p1c3 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p1c1])
     p1c4 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p1c5,p1c6)>_sage_const_1 :
     p1c5 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p1c1,p1c3])
     p1c6 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p1c7,p1c8)>_sage_const_1 :
     p1c7 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p1c1,p1c3,p1c5])
     p1c8 = RandInt(-_sage_const_10 ,_sage_const_10 )
 
 
 ### Now we should have four relatively prime factors for inside the radical. Now we need to determine how many will ``evenly'' get removed and now many will stay within the radical.
 
 # Choose the remainder power for each factor; the part that remains in radicand after simplifying.
 p1f1remainPwr = RandInt(_sage_const_1 ,p1rootVal-_sage_const_1 )
 p1f2remainPwr = RandInt(_sage_const_0 ,p1rootVal-_sage_const_1 )
 p1f3remainPwr = RandInt(_sage_const_0 ,p1rootVal-_sage_const_1 )
 p1f4remainPwr = RandInt(_sage_const_0 ,p1rootVal-_sage_const_1 )
 
 
 # Choose the factorable power; the part that will be removed from the radicand during simplifying.
 p1f1factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p1f2factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p1f3factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p1f4factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 
 
 ### Now we have the number of remainders and the number of even quantities of each factor are going to exist, so we need to make the display values for the function and the solution.
 
 # Build individual function elements that will remain inside the radical
 p1f1remain = (p1c1*x-p1c2)**p1f1remainPwr
 p1f2remain = (p1c3*x-p1c4)**p1f2remainPwr
 p1f3remain = (p1c5*x-p1c6)**p1f3remainPwr
 p1f4remain = (p1c7*x-p1c8)**p1f4remainPwr
 
 # Build individual function elements that will be displayed as the original function (the total of all powers)
 p1f1total = (p1c1*x-p1c2)**(p1f1remainPwr+p1f1factorPwr*p1rootVal)
 p1f2total = (p1c3*x-p1c4)**(p1f2remainPwr+p1f2factorPwr*p1rootVal)
 p1f3total = (p1c5*x-p1c6)**(p1f3remainPwr+p1f3factorPwr*p1rootVal)
 p1f4total = (p1c7*x-p1c8)**(p1f4remainPwr+p1f4factorPwr*p1rootVal)
 
 
 ### Now we build the displayed total function, the total factored piece function, and the remainder (inside radical) function:
 p1fDisp = p1f1total*p1f2total*p1f3total*p1f4total
 p1fRemainder = p1f1remain*p1f2remain*p1f3remain*p1f4remain
 p1fFactored = (p1c1*x-p1c2)**p1f1factorPwr*(p1c3*x-p1c4)**p1f2factorPwr*(p1c5*x-p1c6)**p1f3factorPwr*(p1c7*x-p1c8)**p1f4factorPwr
 
 
 
 ###### Problem p2
 ### Decide on the root value.
 p2rootVal = _sage_const_2 *RandInt(_sage_const_1 ,_sage_const_4 )+_sage_const_1 # They haven't discussed even roots yielding absolute value signs yet, so let's only give them odds for now.
 
 ### Build coefficients. In order to avoid crazy leading coefficients it is useful to ensure that there are no common factors. Start with a baseline of 2 all around, then redefine them to have properties we want.
 p2c1 = _sage_const_2 
 p2c2 = _sage_const_2 
 p2c3 = _sage_const_2 
 p2c4 = _sage_const_2 
 p2c5 = _sage_const_2 
 p2c6 = _sage_const_2 
 p2c7 = _sage_const_2 
 p2c8 = _sage_const_2 
 
 # We will ensure GCD = 1 to avoid a common factor from being pulled out of the factor (ax-b)^n and get crazy leading coefficient.
 # We will also force the leading coefficients of each factor to be different, which will force each factor to stay independent and not merge into one factor when computed. This follows due to the relatively prime aspect of the a,b in (ax-b)^n forms.
 while gcd(p2c1,p2c2)>_sage_const_1 :
     p2c1 = RandInt(_sage_const_1 ,_sage_const_9 )
     p2c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p2c3,p2c4)>_sage_const_1 :
     p2c3 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p2c1])
     p2c4 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p2c5,p2c6)>_sage_const_1 :
     p2c5 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p2c1,p2c3])
     p2c6 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p2c7,p2c8)>_sage_const_1 :
     p2c7 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p2c1,p2c3,p2c5])
     p2c8 = RandInt(-_sage_const_10 ,_sage_const_10 )
 
 
 ### Now we should have four relatively prime factors for inside the radical. Now we need to determine how many will ``evenly'' get removed and now many will stay within the radical.
 
 # Choose the remainder power for each factor; the part that remains in radicand after simplifying.
 p2f1remainPwr = RandInt(_sage_const_1 ,p2rootVal-_sage_const_1 )
 p2f2remainPwr = RandInt(_sage_const_0 ,p2rootVal-_sage_const_1 )
 p2f3remainPwr = RandInt(_sage_const_0 ,p2rootVal-_sage_const_1 )
 p2f4remainPwr = RandInt(_sage_const_0 ,p2rootVal-_sage_const_1 )
 
 
 # Choose the factorable power; the part that will be removed from the radicand during simplifying.
 p2f1factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p2f2factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p2f3factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p2f4factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 
 
 ### Now we have the number of remainders and the number of even quantities of each factor are going to exist, so we need to make the display values for the function and the solution.
 
 # Build individual function elements that will remain inside the radical
 p2f1remain = (p2c1*x-p2c2)**p2f1remainPwr
 p2f2remain = (p2c3*x-p2c4)**p2f2remainPwr
 p2f3remain = (p2c5*x-p2c6)**p2f3remainPwr
 p2f4remain = (p2c7*x-p2c8)**p2f4remainPwr
 
 # Build individual function elements that will be displayed as the original function (the total of all powers)
 p2f1total = (p2c1*x-p2c2)**(p2f1remainPwr+p2f1factorPwr*p2rootVal)
 p2f2total = (p2c3*x-p2c4)**(p2f2remainPwr+p2f2factorPwr*p2rootVal)
 p2f3total = (p2c5*x-p2c6)**(p2f3remainPwr+p2f3factorPwr*p2rootVal)
 p2f4total = (p2c7*x-p2c8)**(p2f4remainPwr+p2f4factorPwr*p2rootVal)
 
 
 ### Now we build the displayed total function, the total factored piece function, and the remainder (inside radical) function:
 p2fDisp = p2f1total*p2f2total*p2f3total*p2f4total
 p2fRemainder = p2f1remain*p2f2remain*p2f3remain*p2f4remain
 p2fFactored = (p2c1*x-p2c2)**p2f1factorPwr*(p2c3*x-p2c4)**p2f2factorPwr*(p2c5*x-p2c6)**p2f3factorPwr*(p2c7*x-p2c8)**p2f4factorPwr
 
 
 
 
 ###### Problem p3
 ### Decide on the root value.
 p3rootVal = _sage_const_2 *RandInt(_sage_const_1 ,_sage_const_4 )+_sage_const_1 # They haven't discussed even roots yielding absolute value signs yet, so let's only give them odds for now.
 
 ### Build coefficients. In order to avoid crazy leading coefficients it is useful to ensure that there are no common factors. Start with a baseline of 2 all around, then redefine them to have properties we want.
 p3c1 = _sage_const_2 
 p3c2 = _sage_const_2 
 p3c3 = _sage_const_2 
 p3c4 = _sage_const_2 
 p3c5 = _sage_const_2 
 p3c6 = _sage_const_2 
 p3c7 = _sage_const_2 
 p3c8 = _sage_const_2 
 
 # We will ensure GCD = 1 to avoid a common factor from being pulled out of the factor (ax-b)^n and get crazy leading coefficient.
 # We will also force the leading coefficients of each factor to be different, which will force each factor to stay independent and not merge into one factor when computed. This follows due to the relatively prime aspect of the a,b in (ax-b)^n forms.
 while gcd(p3c1,p3c2)>_sage_const_1 :
     p3c1 = RandInt(_sage_const_1 ,_sage_const_9 )
     p3c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p3c3,p3c4)>_sage_const_1 :
     p3c3 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p3c1])
     p3c4 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p3c5,p3c6)>_sage_const_1 :
     p3c5 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p3c1,p3c3])
     p3c6 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p3c7,p3c8)>_sage_const_1 :
     p3c7 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p3c1,p3c3,p3c5])
     p3c8 = RandInt(-_sage_const_10 ,_sage_const_10 )
 
 
 ### Now we should have four relatively prime factors for inside the radical. Now we need to determine how many will ``evenly'' get removed and now many will stay within the radical.
 
 # Choose the remainder power for each factor; the part that remains in radicand after simplifying.
 p3f1remainPwr = RandInt(_sage_const_1 ,p3rootVal-_sage_const_1 )
 p3f2remainPwr = RandInt(_sage_const_0 ,p3rootVal-_sage_const_1 )
 p3f3remainPwr = RandInt(_sage_const_0 ,p3rootVal-_sage_const_1 )
 p3f4remainPwr = RandInt(_sage_const_0 ,p3rootVal-_sage_const_1 )
 
 
 # Choose the factorable power; the part that will be removed from the radicand during simplifying.
 p3f1factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p3f2factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p3f3factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p3f4factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 
 
 ### Now we have the number of remainders and the number of even quantities of each factor are going to exist, so we need to make the display values for the function and the solution.
 
 # Build individual function elements that will remain inside the radical
 p3f1remain = (p3c1*x-p3c2)**p3f1remainPwr
 p3f2remain = (p3c3*x-p3c4)**p3f2remainPwr
 p3f3remain = (p3c5*x-p3c6)**p3f3remainPwr
 p3f4remain = (p3c7*x-p3c8)**p3f4remainPwr
 
 # Build individual function elements that will be displayed as the original function (the total of all powers)
 p3f1total = (p3c1*x-p3c2)**(p3f1remainPwr+p3f1factorPwr*p3rootVal)
 p3f2total = (p3c3*x-p3c4)**(p3f2remainPwr+p3f2factorPwr*p3rootVal)
 p3f3total = (p3c5*x-p3c6)**(p3f3remainPwr+p3f3factorPwr*p3rootVal)
 p3f4total = (p3c7*x-p3c8)**(p3f4remainPwr+p3f4factorPwr*p3rootVal)
 
 
 ### Now we build the displayed total function, the total factored piece function, and the remainder (inside radical) function:
 p3fDisp = p3f1total*p3f2total*p3f3total*p3f4total
 p3fRemainder = p3f1remain*p3f2remain*p3f3remain*p3f4remain
 p3fFactored = (p3c1*x-p3c2)**p3f1factorPwr*(p3c3*x-p3c4)**p3f2factorPwr*(p3c5*x-p3c6)**p3f3factorPwr*(p3c7*x-p3c8)**p3f4factorPwr
 
 
 
 
 ###### Problem p4
 ### Decide on the root value.
 p4rootVal = _sage_const_2 *RandInt(_sage_const_1 ,_sage_const_4 )+_sage_const_1 # They haven't discussed even roots yielding absolute value signs yet, so let's only give them odds for now.
 
 ### Build coefficients. In order to avoid crazy leading coefficients it is useful to ensure that there are no common factors. Start with a baseline of 2 all around, then redefine them to have properties we want.
 p4c1 = _sage_const_2 
 p4c2 = _sage_const_2 
 p4c3 = _sage_const_2 
 p4c4 = _sage_const_2 
 p4c5 = _sage_const_2 
 p4c6 = _sage_const_2 
 p4c7 = _sage_const_2 
 p4c8 = _sage_const_2 
 
 # We will ensure GCD = 1 to avoid a common factor from being pulled out of the factor (ax-b)^n and get crazy leading coefficient.
 # We will also force the leading coefficients of each factor to be different, which will force each factor to stay independent and not merge into one factor when computed. This follows due to the relatively prime aspect of the a,b in (ax-b)^n forms.
 while gcd(p4c1,p4c2)>_sage_const_1 :
     p4c1 = RandInt(_sage_const_1 ,_sage_const_9 )
     p4c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p4c3,p4c4)>_sage_const_1 :
     p4c3 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p4c1])
     p4c4 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p4c5,p4c6)>_sage_const_1 :
     p4c5 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p4c1,p4c3])
     p4c6 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p4c7,p4c8)>_sage_const_1 :
     p4c7 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p4c1,p4c3,p4c5])
     p4c8 = RandInt(-_sage_const_10 ,_sage_const_10 )
 
 
 ### Now we should have four relatively prime factors for inside the radical. Now we need to determine how many will ``evenly'' get removed and now many will stay within the radical.
 
 # Choose the remainder power for each factor; the part that remains in radicand after simplifying.
 p4f1remainPwr = RandInt(_sage_const_1 ,p4rootVal-_sage_const_1 )
 p4f2remainPwr = RandInt(_sage_const_0 ,p4rootVal-_sage_const_1 )
 p4f3remainPwr = RandInt(_sage_const_0 ,p4rootVal-_sage_const_1 )
 p4f4remainPwr = RandInt(_sage_const_0 ,p4rootVal-_sage_const_1 )
 
 
 # Choose the factorable power; the part that will be removed from the radicand during simplifying.
 p4f1factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p4f2factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p4f3factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p4f4factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 
 
 ### Now we have the number of remainders and the number of even quantities of each factor are going to exist, so we need to make the display values for the function and the solution.
 
 # Build individual function elements that will remain inside the radical
 p4f1remain = (p4c1*x-p4c2)**p4f1remainPwr
 p4f2remain = (p4c3*x-p4c4)**p4f2remainPwr
 p4f3remain = (p4c5*x-p4c6)**p4f3remainPwr
 p4f4remain = (p4c7*x-p4c8)**p4f4remainPwr
 
 # Build individual function elements that will be displayed as the original function (the total of all powers)
 p4f1total = (p4c1*x-p4c2)**(p4f1remainPwr+p4f1factorPwr*p4rootVal)
 p4f2total = (p4c3*x-p4c4)**(p4f2remainPwr+p4f2factorPwr*p4rootVal)
 p4f3total = (p4c5*x-p4c6)**(p4f3remainPwr+p4f3factorPwr*p4rootVal)
 p4f4total = (p4c7*x-p4c8)**(p4f4remainPwr+p4f4factorPwr*p4rootVal)
 
 
 ### Now we build the displayed total function, the total factored piece function, and the remainder (inside radical) function:
 p4fDisp = p4f1total*p4f2total*p4f3total*p4f4total
 p4fRemainder = p4f1remain*p4f2remain*p4f3remain*p4f4remain
 p4fFactored = (p4c1*x-p4c2)**p4f1factorPwr*(p4c3*x-p4c4)**p4f2factorPwr*(p4c5*x-p4c6)**p4f3factorPwr*(p4c7*x-p4c8)**p4f4factorPwr
 
 
 
 ###### Problem p5
 ### Decide on the root value.
 p5rootVal = _sage_const_2 *RandInt(_sage_const_1 ,_sage_const_4 )+_sage_const_1 # They haven't discussed even roots yielding absolute value signs yet, so let's only give them odds for now.
 
 ### Build coefficients. In order to avoid crazy leading coefficients it is useful to ensure that there are no common factors. Start with a baseline of 2 all around, then redefine them to have properties we want.
 p5c1 = _sage_const_2 
 p5c2 = _sage_const_2 
 p5c3 = _sage_const_2 
 p5c4 = _sage_const_2 
 p5c5 = _sage_const_2 
 p5c6 = _sage_const_2 
 p5c7 = _sage_const_2 
 p5c8 = _sage_const_2 
 
 # We will ensure GCD = 1 to avoid a common factor from being pulled out of the factor (ax-b)^n and get crazy leading coefficient.
 # We will also force the leading coefficients of each factor to be different, which will force each factor to stay independent and not merge into one factor when computed. This follows due to the relatively prime aspect of the a,b in (ax-b)^n forms.
 while gcd(p5c1,p5c2)>_sage_const_1 :
     p5c1 = RandInt(_sage_const_1 ,_sage_const_9 )
     p5c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p5c3,p5c4)>_sage_const_1 :
     p5c3 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p5c1])
     p5c4 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p5c5,p5c6)>_sage_const_1 :
     p5c5 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p5c1,p5c3])
     p5c6 = RandInt(-_sage_const_10 ,_sage_const_10 )
 while gcd(p5c7,p5c8)>_sage_const_1 :
     p5c7 = NonZeroInt(_sage_const_1 ,_sage_const_9 ,[p5c1,p5c3,p5c5])
     p5c8 = RandInt(-_sage_const_10 ,_sage_const_10 )
 
 
 ### Now we should have four relatively prime factors for inside the radical. Now we need to determine how many will ``evenly'' get removed and now many will stay within the radical.
 
 # Choose the remainder power for each factor; the part that remains in radicand after simplifying.
 p5f1remainPwr = RandInt(_sage_const_1 ,p5rootVal-_sage_const_1 )
 p5f2remainPwr = RandInt(_sage_const_0 ,p5rootVal-_sage_const_1 )
 p5f3remainPwr = RandInt(_sage_const_0 ,p5rootVal-_sage_const_1 )
 p5f4remainPwr = RandInt(_sage_const_0 ,p5rootVal-_sage_const_1 )
 
 
 # Choose the factorable power; the part that will be removed from the radicand during simplifying.
 p5f1factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p5f2factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p5f3factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 p5f4factorPwr = RandInt(_sage_const_0 ,_sage_const_5 )
 
 
 ### Now we have the number of remainders and the number of even quantities of each factor are going to exist, so we need to make the display values for the function and the solution.
 
 # Build individual function elements that will remain inside the radical
 p5f1remain = (p5c1*x-p5c2)**p5f1remainPwr
 p5f2remain = (p5c3*x-p5c4)**p5f2remainPwr
 p5f3remain = (p5c5*x-p5c6)**p5f3remainPwr
 p5f4remain = (p5c7*x-p5c8)**p5f4remainPwr
 
 # Build individual function elements that will be displayed as the original function (the total of all powers)
 p5f1total = (p5c1*x-p5c2)**(p5f1remainPwr+p5f1factorPwr*p5rootVal)
 p5f2total = (p5c3*x-p5c4)**(p5f2remainPwr+p5f2factorPwr*p5rootVal)
 p5f3total = (p5c5*x-p5c6)**(p5f3remainPwr+p5f3factorPwr*p5rootVal)
 p5f4total = (p5c7*x-p5c8)**(p5f4remainPwr+p5f4factorPwr*p5rootVal)
 
 
 ### Now we build the displayed total function, the total factored piece function, and the remainder (inside radical) function:
 p5fDisp = p5f1total*p5f2total*p5f3total*p5f4total
 p5fRemainder = p5f1remain*p5f2remain*p5f3remain*p5f4remain
 p5fFactored = (p5c1*x-p5c2)**p5f1factorPwr*(p5c3*x-p5c4)**p5f2factorPwr*(p5c5*x-p5c6)**p5f3factorPwr*(p5c7*x-p5c8)**p5f4factorPwr
 
 
 
 
except:
 _st_.goboom(_sage_const_374 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_0 , latex(p1rootVal))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_1 , latex(p1fDisp))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_2 , latex(p1fDisp))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_3 , latex(p1fDisp))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_4 , latex(p1fDisp))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_5 , latex(p1fFactored))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_6 , latex(p1rootVal))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_7 , latex(p1fRemainder))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_8 , latex(p1fRemainder))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_9 , latex(p1fRemainder))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.inline(_sage_const_10 , latex(p1fRemainder))
except:
 _st_.goboom(_sage_const_380 )
try:
 _st_.current_tex_line = _sage_const_383 
 _st_.inline(_sage_const_11 , latex(p1f1total))
except:
 _st_.goboom(_sage_const_383 )
try:
 _st_.current_tex_line = _sage_const_383 
 _st_.inline(_sage_const_12 , latex(p1f1total))
except:
 _st_.goboom(_sage_const_383 )
try:
 _st_.current_tex_line = _sage_const_383 
 _st_.inline(_sage_const_13 , latex((p1c1*x-p1c2)**(p1f1factorPwr*p1rootVal)))
except:
 _st_.goboom(_sage_const_383 )
try:
 _st_.current_tex_line = _sage_const_383 
 _st_.inline(_sage_const_14 , latex(p1c1*x-p1c2))
except:
 _st_.goboom(_sage_const_383 )
try:
 _st_.current_tex_line = _sage_const_383 
 _st_.inline(_sage_const_15 , latex(p1f1remainPwr))
except:
 _st_.goboom(_sage_const_383 )
try:
 _st_.current_tex_line = _sage_const_383 
 _st_.inline(_sage_const_16 , latex((p1c1*x-p1c2)**(p1f1factorPwr*p1rootVal)))
except:
 _st_.goboom(_sage_const_383 )
try:
 _st_.current_tex_line = _sage_const_383 
 _st_.inline(_sage_const_17 , latex(p1c1*x-p1c2))
except:
 _st_.goboom(_sage_const_383 )
try:
 _st_.current_tex_line = _sage_const_383 
 _st_.inline(_sage_const_18 , latex(p1f1remainPwr))
except:
 _st_.goboom(_sage_const_383 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_19 , latex(p2rootVal))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_20 , latex(p2fDisp))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_21 , latex(p2fDisp))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_22 , latex(p2fDisp))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_23 , latex(p2fDisp))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_24 , latex(p2fFactored))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_25 , latex(p2rootVal))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_26 , latex(p2fRemainder))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_27 , latex(p2fRemainder))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_28 , latex(p2fRemainder))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.inline(_sage_const_29 , latex(p2fRemainder))
except:
 _st_.goboom(_sage_const_390 )
try:
 _st_.current_tex_line = _sage_const_393 
 _st_.inline(_sage_const_30 , latex(p2f1total))
except:
 _st_.goboom(_sage_const_393 )
try:
 _st_.current_tex_line = _sage_const_393 
 _st_.inline(_sage_const_31 , latex(p2f1total))
except:
 _st_.goboom(_sage_const_393 )
try:
 _st_.current_tex_line = _sage_const_393 
 _st_.inline(_sage_const_32 , latex((p2c1*x-p2c2)**(p2f1factorPwr*p2rootVal)))
except:
 _st_.goboom(_sage_const_393 )
try:
 _st_.current_tex_line = _sage_const_393 
 _st_.inline(_sage_const_33 , latex(p2c1*x-p2c2))
except:
 _st_.goboom(_sage_const_393 )
try:
 _st_.current_tex_line = _sage_const_393 
 _st_.inline(_sage_const_34 , latex(p2f1remainPwr))
except:
 _st_.goboom(_sage_const_393 )
try:
 _st_.current_tex_line = _sage_const_393 
 _st_.inline(_sage_const_35 , latex((p2c1*x-p2c2)**(p2f1factorPwr*p2rootVal)))
except:
 _st_.goboom(_sage_const_393 )
try:
 _st_.current_tex_line = _sage_const_393 
 _st_.inline(_sage_const_36 , latex(p2c1*x-p2c2))
except:
 _st_.goboom(_sage_const_393 )
try:
 _st_.current_tex_line = _sage_const_393 
 _st_.inline(_sage_const_37 , latex(p2f1remainPwr))
except:
 _st_.goboom(_sage_const_393 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_38 , latex(p3rootVal))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_39 , latex(p3fDisp))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_40 , latex(p3fDisp))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_41 , latex(p3fDisp))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_42 , latex(p3fDisp))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_43 , latex(p3fFactored))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_44 , latex(p3rootVal))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_45 , latex(p3fRemainder))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_46 , latex(p3fRemainder))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_47 , latex(p3fRemainder))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_401 
 _st_.inline(_sage_const_48 , latex(p3fRemainder))
except:
 _st_.goboom(_sage_const_401 )
try:
 _st_.current_tex_line = _sage_const_404 
 _st_.inline(_sage_const_49 , latex(p3f1total))
except:
 _st_.goboom(_sage_const_404 )
try:
 _st_.current_tex_line = _sage_const_404 
 _st_.inline(_sage_const_50 , latex(p3f1total))
except:
 _st_.goboom(_sage_const_404 )
try:
 _st_.current_tex_line = _sage_const_404 
 _st_.inline(_sage_const_51 , latex((p3c1*x-p3c2)**(p3f1factorPwr*p3rootVal)))
except:
 _st_.goboom(_sage_const_404 )
try:
 _st_.current_tex_line = _sage_const_404 
 _st_.inline(_sage_const_52 , latex(p3c1*x-p3c2))
except:
 _st_.goboom(_sage_const_404 )
try:
 _st_.current_tex_line = _sage_const_404 
 _st_.inline(_sage_const_53 , latex(p3f1remainPwr))
except:
 _st_.goboom(_sage_const_404 )
try:
 _st_.current_tex_line = _sage_const_404 
 _st_.inline(_sage_const_54 , latex((p3c1*x-p3c2)**(p3f1factorPwr*p3rootVal)))
except:
 _st_.goboom(_sage_const_404 )
try:
 _st_.current_tex_line = _sage_const_404 
 _st_.inline(_sage_const_55 , latex(p3c1*x-p3c2))
except:
 _st_.goboom(_sage_const_404 )
try:
 _st_.current_tex_line = _sage_const_404 
 _st_.inline(_sage_const_56 , latex(p3f1remainPwr))
except:
 _st_.goboom(_sage_const_404 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_57 , latex(p4rootVal))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_58 , latex(p4fDisp))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_59 , latex(p4fDisp))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_60 , latex(p4fDisp))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_61 , latex(p4fDisp))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_62 , latex(p4fFactored))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_63 , latex(p4rootVal))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_64 , latex(p4fRemainder))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_65 , latex(p4fRemainder))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_66 , latex(p4fRemainder))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_412 
 _st_.inline(_sage_const_67 , latex(p4fRemainder))
except:
 _st_.goboom(_sage_const_412 )
try:
 _st_.current_tex_line = _sage_const_415 
 _st_.inline(_sage_const_68 , latex(p4f1total))
except:
 _st_.goboom(_sage_const_415 )
try:
 _st_.current_tex_line = _sage_const_415 
 _st_.inline(_sage_const_69 , latex(p4f1total))
except:
 _st_.goboom(_sage_const_415 )
try:
 _st_.current_tex_line = _sage_const_415 
 _st_.inline(_sage_const_70 , latex((p4c1*x-p4c2)**(p4f1factorPwr*p4rootVal)))
except:
 _st_.goboom(_sage_const_415 )
try:
 _st_.current_tex_line = _sage_const_415 
 _st_.inline(_sage_const_71 , latex(p4c1*x-p4c2))
except:
 _st_.goboom(_sage_const_415 )
try:
 _st_.current_tex_line = _sage_const_415 
 _st_.inline(_sage_const_72 , latex(p4f1remainPwr))
except:
 _st_.goboom(_sage_const_415 )
try:
 _st_.current_tex_line = _sage_const_415 
 _st_.inline(_sage_const_73 , latex((p4c1*x-p4c2)**(p4f1factorPwr*p4rootVal)))
except:
 _st_.goboom(_sage_const_415 )
try:
 _st_.current_tex_line = _sage_const_415 
 _st_.inline(_sage_const_74 , latex(p4c1*x-p4c2))
except:
 _st_.goboom(_sage_const_415 )
try:
 _st_.current_tex_line = _sage_const_415 
 _st_.inline(_sage_const_75 , latex(p4f1remainPwr))
except:
 _st_.goboom(_sage_const_415 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_76 , latex(p5rootVal))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_77 , latex(p5fDisp))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_78 , latex(p5fDisp))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_79 , latex(p5fDisp))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_80 , latex(p5fDisp))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_81 , latex(p5fFactored))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_82 , latex(p5rootVal))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_83 , latex(p5fRemainder))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_84 , latex(p5fRemainder))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_85 , latex(p5fRemainder))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.inline(_sage_const_86 , latex(p5fRemainder))
except:
 _st_.goboom(_sage_const_423 )
try:
 _st_.current_tex_line = _sage_const_426 
 _st_.inline(_sage_const_87 , latex(p5f1total))
except:
 _st_.goboom(_sage_const_426 )
try:
 _st_.current_tex_line = _sage_const_426 
 _st_.inline(_sage_const_88 , latex(p5f1total))
except:
 _st_.goboom(_sage_const_426 )
try:
 _st_.current_tex_line = _sage_const_426 
 _st_.inline(_sage_const_89 , latex((p5c1*x-p5c2)**(p5f1factorPwr*p5rootVal)))
except:
 _st_.goboom(_sage_const_426 )
try:
 _st_.current_tex_line = _sage_const_426 
 _st_.inline(_sage_const_90 , latex(p5c1*x-p5c2))
except:
 _st_.goboom(_sage_const_426 )
try:
 _st_.current_tex_line = _sage_const_426 
 _st_.inline(_sage_const_91 , latex(p5f1remainPwr))
except:
 _st_.goboom(_sage_const_426 )
try:
 _st_.current_tex_line = _sage_const_426 
 _st_.inline(_sage_const_92 , latex((p5c1*x-p5c2)**(p5f1factorPwr*p5rootVal)))
except:
 _st_.goboom(_sage_const_426 )
try:
 _st_.current_tex_line = _sage_const_426 
 _st_.inline(_sage_const_93 , latex(p5c1*x-p5c2))
except:
 _st_.goboom(_sage_const_426 )
try:
 _st_.current_tex_line = _sage_const_426 
 _st_.inline(_sage_const_94 , latex(p5f1remainPwr))
except:
 _st_.goboom(_sage_const_426 )
_st_.endofdoc()

