## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file factoringRationalRootTheorem-Practice1.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_260 = Integer(260); _sage_const_263 = Integer(263); _sage_const_8 = Integer(8); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_292 = Integer(292); _sage_const_295 = Integer(295); _sage_const_311 = Integer(311); _sage_const_9 = Integer(9); _sage_const_276 = Integer(276); _sage_const_214 = Integer(214); _sage_const_600 = Integer(600); _sage_const_279 = Integer(279); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_19 = Integer(19); _sage_const_18 = Integer(18); _sage_const_308 = Integer(308)## This file (factoringRationalRootTheorem-Practice1.sagetex.sage) was *autogenerated* from factoringRationalRootTheorem-Practice1.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('factoringRationalRootTheorem-Practice1', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_13 
_st_.blockbegin()
try:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 primevec = [_sage_const_1 , _sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 ]
 
 ###### Problem p1
 p1ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
 p1ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
 p1ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p1ch1])
 p1ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p1ch2])
 p1ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 p1ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
 p1c1 = primevec[p1ch1]
 p1c2 = primevec[p1ch2]
 
 p1c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch3]
 p1c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch4]
 p1c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch5]
 p1c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch6]
 
 p1c7 = p1c3*p1c4*p1c5*p1c6
 p1c8 = p1c1*p1c2
 
 while abs(p1c7) > _sage_const_600  or abs(p1c8) > _sage_const_15 :
     p1ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p1ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p1ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p1ch1])
     p1ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p1ch2])
     p1ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p1c1 = primevec[p1ch1]
     p1c2 = primevec[p1ch2]
 
     p1c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch3]
     p1c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch4]
     p1c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch5]
     p1c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch6]
 
     p1c7 = p1c3*p1c4*p1c5*p1c6
     p1c8 = p1c1*p1c2
 
 
 p1f1 = (p1c1*x-p1c3)
 p1f2 = (p1c2*x-p1c4)
 p1f3 = (x-p1c5)
 p1f4 = (x-p1c6)
 p1f5 = expand(p1f1*p1f2*p1f3*p1f4)
 p1ans = (p1f1).mul(p1f2,p1f3,p1f4,hold=true)
 
 
 ###### Problem p2
 p2ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
 p2ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
 p2ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p2ch1])
 p2ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p2ch2])
 p2ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 p2ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
 p2c1 = primevec[p2ch1]
 p2c2 = primevec[p2ch2]
 
 p2c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch3]
 p2c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch4]
 p2c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch5]
 p2c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch6]
 
 p2c7 = p2c3*p2c4*p2c5*p2c6
 p2c8 = p2c1*p2c2
 
 while abs(p2c7) > _sage_const_600  or abs(p2c8) > _sage_const_15 :
     p2ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p2ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p2ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p2ch1])
     p2ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p2ch2])
     p2ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p2c1 = primevec[p2ch1]
     p2c2 = primevec[p2ch2]
 
     p2c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch3]
     p2c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch4]
     p2c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch5]
     p2c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch6]
 
     p2c7 = p2c3*p2c4*p2c5*p2c6
     p2c8 = p2c1*p2c2
 
 
 p2f1 = (p2c1*x-p2c3)
 p2f2 = (p2c2*x-p2c4)
 p2f3 = (x-p2c5)
 p2f4 = (x-p2c6)
 p2f5 = expand(p2f1*p2f2*p2f3*p2f4)
 p2ans = (p2f1).mul(p2f2,p2f3,p2f4,hold=true)
 
 ###### Problem p3
 p3ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
 p3ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
 p3ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p3ch1])
 p3ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p3ch2])
 p3ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 p3ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
 p3c1 = primevec[p3ch1]
 p3c2 = primevec[p3ch2]
 
 p3c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch3]
 p3c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch4]
 p3c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch5]
 p3c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch6]
 
 p3c7 = p3c3*p3c4*p3c5*p3c6
 p3c8 = p3c1*p3c2
 
 while abs(p3c7) > _sage_const_600  or abs(p3c8) > _sage_const_15 :
     p3ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p3ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p3ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p3ch1])
     p3ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p3ch2])
     p3ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p3c1 = primevec[p3ch1]
     p3c2 = primevec[p3ch2]
 
     p3c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch3]
     p3c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch4]
     p3c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch5]
     p3c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch6]
 
     p3c7 = p3c3*p3c4*p3c5*p3c6
     p3c8 = p3c1*p3c2
 
 
 p3f1 = (p3c1*x-p3c3)
 p3f2 = (p3c2*x-p3c4)
 p3f3 = (x-p3c5)
 p3f4 = (x-p3c6)
 p3f5 = expand(p3f1*p3f2*p3f3*p3f4)
 p3ans = (p3f1).mul(p3f2,p3f3,p3f4,hold=true)
 
 ###### Problem p4
 p4ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
 p4ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
 p4ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p4ch1])
 p4ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p4ch2])
 p4ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 p4ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
 p4c1 = primevec[p4ch1]
 p4c2 = primevec[p4ch2]
 
 p4c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch3]
 p4c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch4]
 p4c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch5]
 p4c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch6]
 
 p4c7 = p4c3*p4c4*p4c5*p4c6
 p4c8 = p4c1*p4c2
 
 while abs(p4c7) > _sage_const_600  or abs(p4c8) > _sage_const_15 :
     p4ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p4ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p4ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p4ch1])
     p4ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p4ch2])
     p4ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p4c1 = primevec[p4ch1]
     p4c2 = primevec[p4ch2]
 
     p4c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch3]
     p4c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch4]
     p4c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch5]
     p4c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch6]
 
     p4c7 = p4c3*p4c4*p4c5*p4c6
     p4c8 = p4c1*p4c2
 
 
 p4f1 = (p4c1*x-p4c3)
 p4f2 = (p4c2*x-p4c4)
 p4f3 = (x-p4c5)
 p4f4 = (x-p4c6)
 p4f5 = expand(p4f1*p4f2*p4f3*p4f4)
 p4ans = (p4f1).mul(p4f2,p4f3,p4f4,hold=true)
 
 
 
except:
 _st_.goboom(_sage_const_214 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_260 
 _st_.inline(_sage_const_0 , latex(p1f5))
except:
 _st_.goboom(_sage_const_260 )
try:
 _st_.current_tex_line = _sage_const_260 
 _st_.inline(_sage_const_1 , latex(p1ans))
except:
 _st_.goboom(_sage_const_260 )
try:
 _st_.current_tex_line = _sage_const_263 
 _st_.inline(_sage_const_2 , latex(p1c7))
except:
 _st_.goboom(_sage_const_263 )
try:
 _st_.current_tex_line = _sage_const_263 
 _st_.inline(_sage_const_3 , latex(p1c8))
except:
 _st_.goboom(_sage_const_263 )
try:
 _st_.current_tex_line = _sage_const_263 
 _st_.inline(_sage_const_4 , latex(p1c7))
except:
 _st_.goboom(_sage_const_263 )
try:
 _st_.current_tex_line = _sage_const_263 
 _st_.inline(_sage_const_5 , latex(p1c8))
except:
 _st_.goboom(_sage_const_263 )
try:
 _st_.current_tex_line = _sage_const_276 
 _st_.inline(_sage_const_6 , latex(p2f5))
except:
 _st_.goboom(_sage_const_276 )
try:
 _st_.current_tex_line = _sage_const_276 
 _st_.inline(_sage_const_7 , latex(p2ans))
except:
 _st_.goboom(_sage_const_276 )
try:
 _st_.current_tex_line = _sage_const_279 
 _st_.inline(_sage_const_8 , latex(p2c7))
except:
 _st_.goboom(_sage_const_279 )
try:
 _st_.current_tex_line = _sage_const_279 
 _st_.inline(_sage_const_9 , latex(p2c8))
except:
 _st_.goboom(_sage_const_279 )
try:
 _st_.current_tex_line = _sage_const_279 
 _st_.inline(_sage_const_10 , latex(p2c7))
except:
 _st_.goboom(_sage_const_279 )
try:
 _st_.current_tex_line = _sage_const_279 
 _st_.inline(_sage_const_11 , latex(p2c8))
except:
 _st_.goboom(_sage_const_279 )
try:
 _st_.current_tex_line = _sage_const_292 
 _st_.inline(_sage_const_12 , latex(p3f5))
except:
 _st_.goboom(_sage_const_292 )
try:
 _st_.current_tex_line = _sage_const_292 
 _st_.inline(_sage_const_13 , latex(p3ans))
except:
 _st_.goboom(_sage_const_292 )
try:
 _st_.current_tex_line = _sage_const_295 
 _st_.inline(_sage_const_14 , latex(p3c7))
except:
 _st_.goboom(_sage_const_295 )
try:
 _st_.current_tex_line = _sage_const_295 
 _st_.inline(_sage_const_15 , latex(p3c8))
except:
 _st_.goboom(_sage_const_295 )
try:
 _st_.current_tex_line = _sage_const_295 
 _st_.inline(_sage_const_16 , latex(p3c7))
except:
 _st_.goboom(_sage_const_295 )
try:
 _st_.current_tex_line = _sage_const_295 
 _st_.inline(_sage_const_17 , latex(p3c8))
except:
 _st_.goboom(_sage_const_295 )
try:
 _st_.current_tex_line = _sage_const_308 
 _st_.inline(_sage_const_18 , latex(p4f5))
except:
 _st_.goboom(_sage_const_308 )
try:
 _st_.current_tex_line = _sage_const_308 
 _st_.inline(_sage_const_19 , latex(p4ans))
except:
 _st_.goboom(_sage_const_308 )
try:
 _st_.current_tex_line = _sage_const_311 
 _st_.inline(_sage_const_20 , latex(p4c7))
except:
 _st_.goboom(_sage_const_311 )
try:
 _st_.current_tex_line = _sage_const_311 
 _st_.inline(_sage_const_21 , latex(p4c8))
except:
 _st_.goboom(_sage_const_311 )
try:
 _st_.current_tex_line = _sage_const_311 
 _st_.inline(_sage_const_22 , latex(p4c7))
except:
 _st_.goboom(_sage_const_311 )
try:
 _st_.current_tex_line = _sage_const_311 
 _st_.inline(_sage_const_23 , latex(p4c8))
except:
 _st_.goboom(_sage_const_311 )
_st_.endofdoc()

