## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file factoringGroupingMethod-Practice1.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_166 = Integer(166); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_120 = Integer(120); _sage_const_206 = Integer(206); _sage_const_10 = Integer(10); _sage_const_1000 = Integer(1000); _sage_const_176 = Integer(176); _sage_const_2000 = Integer(2000); _sage_const_186 = Integer(186); _sage_const_196 = Integer(196)## This file (factoringGroupingMethod-Practice1.sagetex.sage) was *autogenerated* from factoringGroupingMethod-Practice1.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('factoringGroupingMethod-Practice1', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_8 
_st_.blockbegin()
try:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 ###### Problem p1
 p1c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p1c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p1c3 = RandInt(_sage_const_1 ,_sage_const_10 )
 while p1c3*p1c1**_sage_const_2 >_sage_const_1000  or p1c1**_sage_const_2 +p1c2>_sage_const_1000 :
     p1c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p1c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p1c3 = RandInt(_sage_const_1 ,_sage_const_10 )
 
 p1f1 = x + p1c1
 p1f2 = x - p1c1
 p1f3 = p1c3*x + p1c2
 
 p1f4 = expand(p1f1*p1f2*p1f3)
 p1ans = (p1f1).mul(p1f2,p1f3,hold=true)
 
 
 
 
 ###### Problem p2
 p2c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p2c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p2c3 = RandInt(_sage_const_1 ,_sage_const_10 )
 while p2c3*p2c1**_sage_const_2 >_sage_const_1000  or p2c1**_sage_const_2 +p2c2>_sage_const_1000 :
     p2c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p2c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p2c3 = RandInt(_sage_const_1 ,_sage_const_10 )
 
 p2f1 = x + p2c1
 p2f2 = x - p2c1
 p2f3 = p2c3*x + p2c2
 
 p2f4 = expand(p2f1*p2f2*p2f3)
 p2ans = (p2f1).mul(p2f2,p2f3,hold=true)
 
 
 
 ###### Problem p3
 p3c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p3c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p3c3 = RandInt(_sage_const_1 ,_sage_const_10 )
 while p3c3*p3c1**_sage_const_2 >_sage_const_1000  or p3c1**_sage_const_2 +p3c2>_sage_const_1000 :
     p3c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p3c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p3c3 = RandInt(_sage_const_1 ,_sage_const_10 )
 
 p3f1 = x + p3c1
 p3f2 = x - p3c1
 p3f3 = p3c3*x + p3c2
 
 p3f4 = expand(p3f1*p3f2*p3f3)
 p3ans = (p3f1).mul(p3f2,p3f3,hold=true)
 
 
 
 ###### Problem p4
 p4c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p4c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p4c3 = RandInt(_sage_const_1 ,_sage_const_10 )
 while p4c3*p4c1**_sage_const_2 >_sage_const_1000  or p4c1**_sage_const_2 +p4c2>_sage_const_1000 :
     p4c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p4c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p4c3 = RandInt(_sage_const_1 ,_sage_const_10 )
 
 p4f1 = x + p4c1
 p4f2 = x - p4c1
 p4f3 = p4c3*x + p4c2
 
 p4f4 = expand(p4f1*p4f2*p4f3)
 p4ans = (p4f1).mul(p4f2,p4f3,hold=true)
 
 
 
 ###### Problem p5
 p5c1 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
 p5c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
 p5c3 = NonZeroInt(-_sage_const_6 ,_sage_const_6 )
 p5c4 = RandInt(_sage_const_1 ,_sage_const_7 )
 while abs(p5c3)*p5c1**_sage_const_2 *p5c2**_sage_const_2 >_sage_const_2000  or gcd(p5c3,p5c4)>_sage_const_2 :
     p5c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p5c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p5c3 = RandInt(_sage_const_1 ,_sage_const_10 )
 
 
 p5f1 = x + p5c1
 p5f2 = x - p5c1
 p5f3 = x + p5c2
 p5f4 = x - p5c2
 p5f5 = p5c4*x + p5c3
 
 p5f6 = expand(p5f1*p5f2*p5f3*p5f4*p5f5)
 p5ans = (p5f1).mul(p5f2,p5f3,p5f4,p5f5,hold=true)
 
 
 
 
except:
 _st_.goboom(_sage_const_120 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_166 
 _st_.inline(_sage_const_0 , latex(p1f4))
except:
 _st_.goboom(_sage_const_166 )
try:
 _st_.current_tex_line = _sage_const_166 
 _st_.inline(_sage_const_1 , latex(p1ans))
except:
 _st_.goboom(_sage_const_166 )
try:
 _st_.current_tex_line = _sage_const_176 
 _st_.inline(_sage_const_2 , latex(p2f4))
except:
 _st_.goboom(_sage_const_176 )
try:
 _st_.current_tex_line = _sage_const_176 
 _st_.inline(_sage_const_3 , latex(p2ans))
except:
 _st_.goboom(_sage_const_176 )
try:
 _st_.current_tex_line = _sage_const_186 
 _st_.inline(_sage_const_4 , latex(p3f4))
except:
 _st_.goboom(_sage_const_186 )
try:
 _st_.current_tex_line = _sage_const_186 
 _st_.inline(_sage_const_5 , latex(p3ans))
except:
 _st_.goboom(_sage_const_186 )
try:
 _st_.current_tex_line = _sage_const_196 
 _st_.inline(_sage_const_6 , latex(p4f4))
except:
 _st_.goboom(_sage_const_196 )
try:
 _st_.current_tex_line = _sage_const_196 
 _st_.inline(_sage_const_7 , latex(p4ans))
except:
 _st_.goboom(_sage_const_196 )
try:
 _st_.current_tex_line = _sage_const_206 
 _st_.inline(_sage_const_8 , latex(p5f6))
except:
 _st_.goboom(_sage_const_206 )
try:
 _st_.current_tex_line = _sage_const_206 
 _st_.inline(_sage_const_9 , latex(p5ans))
except:
 _st_.goboom(_sage_const_206 )
_st_.endofdoc()

