## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file factoringSpecialForms-Practice1.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_131 = Integer(131); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_143 = Integer(143); _sage_const_77 = Integer(77); _sage_const_13 = Integer(13); _sage_const_10 = Integer(10); _sage_const_121 = Integer(121)## This file (factoringSpecialForms-Practice1.sagetex.sage) was *autogenerated* from factoringSpecialForms-Practice1.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('factoringSpecialForms-Practice1', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_13 
_st_.blockbegin()
try:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 
 ###### Problem p1
 p1c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p1c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
 
 p1f1 = (p1c2*x - p1c1)
 p1tog = RandInt(_sage_const_0 ,_sage_const_1 )
 if p1tog == _sage_const_0 :
     p1f2 = (p1c2*x + p1c1)
 else:
     p1f2 = ((p1c2*x)**_sage_const_2  + p1c2*p1c1*x + p1c1**_sage_const_2 )
 
 p1f3 = p1f1.mul(p1f2,hold=true)
 p1f4 = expand(p1f3)
 
 
 
 ###### Problem p2
 p2c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p2c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
 
 p2f1 = (p2c2*x - p2c1)
 p2tog = RandInt(_sage_const_0 ,_sage_const_1 )
 if p2tog == _sage_const_0 :
     p2f2 = (p2c2*x + p2c1)
 else:
     p2f2 = ((p2c2*x)**_sage_const_2  + p2c2*p2c1*x + p2c1**_sage_const_2 )
 
 p2f3 = p2f1.mul(p2f2,hold=true)
 p2f4 = expand(p2f3)
 
 
 ###### Problem p3
 p3c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 )
 p3c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
 
 p3f1 = (p3c2*x - p3c1)
 p3tog = RandInt(_sage_const_0 ,_sage_const_1 )
 if p3tog == _sage_const_0 :
     p3f2 = (p3c2*x + p3c1)
 else:
     p3f2 = ((p3c2*x)**_sage_const_2  + p3c2*p3c1*x + p3c1**_sage_const_2 )
 
 p3f3 = p3f1.mul(p3f2,hold=true)
 p3f4 = expand(p3f3)
 
 
 
except:
 _st_.goboom(_sage_const_77 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_121 
 _st_.inline(_sage_const_0 , latex(p1f4))
except:
 _st_.goboom(_sage_const_121 )
try:
 _st_.current_tex_line = _sage_const_121 
 _st_.inline(_sage_const_1 , latex(p1f3))
except:
 _st_.goboom(_sage_const_121 )
try:
 _st_.current_tex_line = _sage_const_131 
 _st_.inline(_sage_const_2 , latex(p2f4))
except:
 _st_.goboom(_sage_const_131 )
try:
 _st_.current_tex_line = _sage_const_131 
 _st_.inline(_sage_const_3 , latex(p2f3))
except:
 _st_.goboom(_sage_const_131 )
try:
 _st_.current_tex_line = _sage_const_143 
 _st_.inline(_sage_const_4 , latex(p3f4))
except:
 _st_.goboom(_sage_const_143 )
try:
 _st_.current_tex_line = _sage_const_143 
 _st_.inline(_sage_const_5 , latex(p3f3))
except:
 _st_.goboom(_sage_const_143 )
_st_.endofdoc()

