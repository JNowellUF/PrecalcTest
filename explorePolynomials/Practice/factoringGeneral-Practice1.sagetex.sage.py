## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file factoringGeneral-Practice1.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_1836 = Integer(1836); _sage_const_1814 = Integer(1814); _sage_const_28 = Integer(28); _sage_const_1781 = Integer(1781); _sage_const_1677 = Integer(1677); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_26 = Integer(26); _sage_const_27 = Integer(27); _sage_const_24 = Integer(24); _sage_const_25 = Integer(25); _sage_const_1902 = Integer(1902); _sage_const_1792 = Integer(1792); _sage_const_1891 = Integer(1891); _sage_const_1858 = Integer(1858); _sage_const_1825 = Integer(1825); _sage_const_1847 = Integer(1847); _sage_const_600 = Integer(600); _sage_const_1770 = Integer(1770); _sage_const_1803 = Integer(1803); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_1759 = Integer(1759); _sage_const_19 = Integer(19); _sage_const_18 = Integer(18); _sage_const_1869 = Integer(1869); _sage_const_29 = Integer(29); _sage_const_1880 = Integer(1880); _sage_const_1913 = Integer(1913)## This file (factoringGeneral-Practice1.sagetex.sage) was *autogenerated* from factoringGeneral-Practice1.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('factoringGeneral-Practice1', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_9 
_st_.blockbegin()
try:
 
 ### Initial function definitions:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 ######  Problem p1
 
 primevec = [_sage_const_1 , _sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 ]
 
 p1variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p1variant == _sage_const_0 :
     p1c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p1c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p1f1 = x+p1c1
     p1f2 = x+p1c2
     p1disp = expand(p1f1*p1f2)
     p1ans = (p1f1).mul(p1f2,hold=true)
 
 
 ##  AC Method
 if p1variant == _sage_const_1 :
     p1c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p1c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p1c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p1c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p1f1 = p1c3*x + p1c1
     p1f2 = p1c4*x + p1c2
 
     p1disp = expand(p1f1*p1f2)
     p1ans = (p1f1).mul(p1f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p1variant == _sage_const_2 :
     p1ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p1ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p1ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p1ch1])
     p1ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p1ch2])
     p1ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p1ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p1c1 = primevec[p1ch1]
     p1c2 = primevec[p1ch2]
 
     p1c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch3]
     p1c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch4]
     p1c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch5]
     p1c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch6]
 
     p1c7 = p1c3*p1c4*p1c5*p1c6
     p1c8 = p1c1*p1c2
 
     while abs(p1c7) > _sage_const_600  or abs(p1c8) > _sage_const_15 :
         p1ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p1ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p1ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p1ch1])
         p1ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p1ch2])
         p1ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p1c1 = primevec[p1ch1]
         p1c2 = primevec[p1ch2]
 
         p1c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch3]
         p1c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch4]
         p1c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch5]
         p1c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p1ch6]
 
         p1c7 = p1c3*p1c4*p1c5*p1c6
         p1c8 = p1c1*p1c2
 
 
     p1f1 = (p1c1*x-p1c3)
     p1f2 = (p1c2*x-p1c4)
     p1f3 = (x-p1c5)
     p1f4 = (x-p1c6)
     p1disp = expand(p1f1*p1f2*p1f3*p1f4)
     p1ans = (p1f1).mul(p1f2,p1f3,p1f4,hold=true)
 
 
 ##  Grouping Method
 if p1variant == _sage_const_3 :
     p1c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p1c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p1c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p1c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p1f1 = p1c3*x + p1c1
     p1f2 = p1c3*x - p1c1
     p1f3 = p1c4*x + p1c2
 
     p1disp = expand(p1f1*p1f2*p1f3)
     p1ans = (p1f1).mul(p1f2,p1f3,hold=true)
 
 
 
 ##  Special Forms
 if p1variant == _sage_const_4 :
     p1c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p1c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p1c2,-p1c2,p1c2**_sage_const_2 ,-p1c2**_sage_const_2 ,-p1c2**_sage_const_3 ,p1c2**_sage_const_3 ])
 
     p1f1 = (p1c2*x - p1c1)
     p1tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p1tog == _sage_const_0 :
         p1f2 = (p1c2*x + p1c1)
     else:
         p1f2 = ((p1c2*x)**_sage_const_2  + p1c2*p1c1*x + p1c1**_sage_const_2 )
 
     p1ans = p1f1.mul(p1f2,hold=true)
     p1disp = expand(p1f1*p1f2)
 
 
 
 
 
 ######  Problem p2
 
 p2variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p2variant == _sage_const_0 :
     p2c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p2c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p2f1 = x+p2c1
     p2f2 = x+p2c2
     p2disp = expand(p2f1*p2f2)
     p2ans = (p2f1).mul(p2f2,hold=true)
 
 
 ##  AC Method
 if p2variant == _sage_const_1 :
     p2c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p2c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p2c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p2c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p2f1 = p2c3*x + p2c1
     p2f2 = p2c4*x + p2c2
 
     p2disp = expand(p2f1*p2f2)
     p2ans = (p2f1).mul(p2f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p2variant == _sage_const_2 :
     p2ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p2ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p2ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p2ch1])
     p2ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p2ch2])
     p2ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p2ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p2c1 = primevec[p2ch1]
     p2c2 = primevec[p2ch2]
 
     p2c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch3]
     p2c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch4]
     p2c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch5]
     p2c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch6]
 
     p2c7 = p2c3*p2c4*p2c5*p2c6
     p2c8 = p2c1*p2c2
 
     while abs(p2c7) > _sage_const_600  or abs(p2c8) > _sage_const_15 :
         p2ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p2ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p2ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p2ch1])
         p2ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p2ch2])
         p2ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p2c1 = primevec[p2ch1]
         p2c2 = primevec[p2ch2]
 
         p2c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch3]
         p2c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch4]
         p2c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch5]
         p2c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p2ch6]
 
         p2c7 = p2c3*p2c4*p2c5*p2c6
         p2c8 = p2c1*p2c2
 
 
     p2f1 = (p2c1*x-p2c3)
     p2f2 = (p2c2*x-p2c4)
     p2f3 = (x-p2c5)
     p2f4 = (x-p2c6)
     p2disp = expand(p2f1*p2f2*p2f3*p2f4)
     p2ans = (p2f1).mul(p2f2,p2f3,p2f4,hold=true)
 
 
 
 ##  Grouping Method
 if p2variant == _sage_const_3 :
     p2c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p2c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p2c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p2c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p2f1 = p2c3*x + p2c1
     p2f2 = p2c3*x - p2c1
     p2f3 = p2c4*x + p2c2
 
     p2disp = expand(p2f1*p2f2*p2f3)
     p2ans = (p2f1).mul(p2f2,p2f3,hold=true)
 
 
 
 ##  Special Forms
 if p2variant == _sage_const_4 :
     p2c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p2c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p2c2,-p2c2,p2c2**_sage_const_2 ,-p2c2**_sage_const_2 ,-p2c2**_sage_const_3 ,p2c2**_sage_const_3 ])
 
     p2f1 = (p2c2*x - p2c1)
     p2tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p2tog == _sage_const_0 :
         p2f2 = (p2c2*x + p2c1)
     else:
         p2f2 = ((p2c2*x)**_sage_const_2  + p2c2*p2c1*x + p2c1**_sage_const_2 )
 
     p2ans = p2f1.mul(p2f2,hold=true)
     p2disp = expand(p2f1*p2f2)
 
 
 
 
 
 ######  Problem p3
 
 p3variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p3variant == _sage_const_0 :
     p3c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p3c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p3f1 = x+p3c1
     p3f2 = x+p3c2
     p3disp = expand(p3f1*p3f2)
     p3ans = (p3f1).mul(p3f2,hold=true)
 
 
 ##  AC Method
 if p3variant == _sage_const_1 :
     p3c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p3c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p3c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p3c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p3f1 = p3c3*x + p3c1
     p3f2 = p3c4*x + p3c2
 
     p3disp = expand(p3f1*p3f2)
     p3ans = (p3f1).mul(p3f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p3variant == _sage_const_2 :
     p3ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p3ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p3ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p3ch1])
     p3ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p3ch2])
     p3ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p3ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p3c1 = primevec[p3ch1]
     p3c2 = primevec[p3ch2]
 
     p3c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch3]
     p3c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch4]
     p3c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch5]
     p3c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch6]
 
     p3c7 = p3c3*p3c4*p3c5*p3c6
     p3c8 = p3c1*p3c2
 
     while abs(p3c7) > _sage_const_600  or abs(p3c8) > _sage_const_15 :
         p3ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p3ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p3ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p3ch1])
         p3ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p3ch2])
         p3ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p3c1 = primevec[p3ch1]
         p3c2 = primevec[p3ch2]
 
         p3c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch3]
         p3c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch4]
         p3c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch5]
         p3c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p3ch6]
 
         p3c7 = p3c3*p3c4*p3c5*p3c6
         p3c8 = p3c1*p3c2
 
 
     p3f1 = (p3c1*x-p3c3)
     p3f2 = (p3c2*x-p3c4)
     p3f3 = (x-p3c5)
     p3f4 = (x-p3c6)
     p3disp = expand(p3f1*p3f2*p3f3*p3f4)
     p3ans = (p3f1).mul(p3f2,p3f3,p3f4,hold=true)
 
 
 
 ##  Grouping Method
 if p3variant == _sage_const_3 :
     p3c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p3c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p3c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p3c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p3f1 = p3c3*x + p3c1
     p3f2 = p3c3*x - p3c1
     p3f3 = p3c4*x + p3c2
 
     p3disp = expand(p3f1*p3f2*p3f3)
     p3ans = (p3f1).mul(p3f2,p3f3,hold=true)
 
 
 
 ##  Special Forms
 if p3variant == _sage_const_4 :
     p3c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p3c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p3c2,-p3c2,p3c2**_sage_const_2 ,-p3c2**_sage_const_2 ,-p3c2**_sage_const_3 ,p3c2**_sage_const_3 ])
 
     p3f1 = (p3c2*x - p3c1)
     p3tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p3tog == _sage_const_0 :
         p3f2 = (p3c2*x + p3c1)
     else:
         p3f2 = ((p3c2*x)**_sage_const_2  + p3c2*p3c1*x + p3c1**_sage_const_2 )
 
     p3ans = p3f1.mul(p3f2,hold=true)
     p3disp = expand(p3f1*p3f2)
 
 
 
 
 
 ######  Problem p4
 
 p4variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p4variant == _sage_const_0 :
     p4c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p4c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p4f1 = x+p4c1
     p4f2 = x+p4c2
     p4disp = expand(p4f1*p4f2)
     p4ans = (p4f1).mul(p4f2,hold=true)
 
 
 ##  AC Method
 if p4variant == _sage_const_1 :
     p4c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p4c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p4c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p4c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p4f1 = p4c3*x + p4c1
     p4f2 = p4c4*x + p4c2
 
     p4disp = expand(p4f1*p4f2)
     p4ans = (p4f1).mul(p4f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p4variant == _sage_const_2 :
     p4ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p4ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p4ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p4ch1])
     p4ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p4ch2])
     p4ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p4ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p4c1 = primevec[p4ch1]
     p4c2 = primevec[p4ch2]
 
     p4c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch3]
     p4c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch4]
     p4c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch5]
     p4c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch6]
 
     p4c7 = p4c3*p4c4*p4c5*p4c6
     p4c8 = p4c1*p4c2
 
     while abs(p4c7) > _sage_const_600  or abs(p4c8) > _sage_const_15 :
         p4ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p4ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p4ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p4ch1])
         p4ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p4ch2])
         p4ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p4c1 = primevec[p4ch1]
         p4c2 = primevec[p4ch2]
 
         p4c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch3]
         p4c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch4]
         p4c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch5]
         p4c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p4ch6]
 
         p4c7 = p4c3*p4c4*p4c5*p4c6
         p4c8 = p4c1*p4c2
 
 
     p4f1 = (p4c1*x-p4c3)
     p4f2 = (p4c2*x-p4c4)
     p4f3 = (x-p4c5)
     p4f4 = (x-p4c6)
     p4disp = expand(p4f1*p4f2*p4f3*p4f4)
     p4ans = (p4f1).mul(p4f2,p4f3,p4f4,hold=true)
 
 
 
 ##  Grouping Method
 if p4variant == _sage_const_3 :
     p4c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p4c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p4c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p4c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p4f1 = p4c3*x + p4c1
     p4f2 = p4c3*x - p4c1
     p4f3 = p4c4*x + p4c2
 
     p4disp = expand(p4f1*p4f2*p4f3)
     p4ans = (p4f1).mul(p4f2,p4f3,hold=true)
 
 
 
 ##  Special Forms
 if p4variant == _sage_const_4 :
     p4c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p4c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p4c2,-p4c2,p4c2**_sage_const_2 ,-p4c2**_sage_const_2 ,-p4c2**_sage_const_3 ,p4c2**_sage_const_3 ])
 
     p4f1 = (p4c2*x - p4c1)
     p4tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p4tog == _sage_const_0 :
         p4f2 = (p4c2*x + p4c1)
     else:
         p4f2 = ((p4c2*x)**_sage_const_2  + p4c2*p4c1*x + p4c1**_sage_const_2 )
 
     p4ans = p4f1.mul(p4f2,hold=true)
     p4disp = expand(p4f1*p4f2)
 
 
 
 
 
 ######  Problem p5
 
 p5variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p5variant == _sage_const_0 :
     p5c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p5c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p5f1 = x+p5c1
     p5f2 = x+p5c2
     p5disp = expand(p5f1*p5f2)
     p5ans = (p5f1).mul(p5f2,hold=true)
 
 
 
 ##  AC Method
 if p5variant == _sage_const_1 :
     p5c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p5c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p5c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p5c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p5f1 = p5c3*x + p5c1
     p5f2 = p5c4*x + p5c2
 
     p5disp = expand(p5f1*p5f2)
     p5ans = (p5f1).mul(p5f2, hold=true)
 
 ##  Factoring with Rational Root Theorem 1
 if p5variant == _sage_const_2 :
     p5ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p5ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p5ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p5ch1])
     p5ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p5ch2])
     p5ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p5ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p5c1 = primevec[p5ch1]
     p5c2 = primevec[p5ch2]
 
     p5c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p5ch3]
     p5c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p5ch4]
     p5c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p5ch5]
     p5c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p5ch6]
 
     p5c7 = p5c3*p5c4*p5c5*p5c6
     p5c8 = p5c1*p5c2
 
     while abs(p5c7) > _sage_const_600  or abs(p5c8) > _sage_const_15 :
         p5ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p5ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p5ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p5ch1])
         p5ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p5ch2])
         p5ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p5c1 = primevec[p5ch1]
         p5c2 = primevec[p5ch2]
 
         p5c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p5ch3]
         p5c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p5ch4]
         p5c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p5ch5]
         p5c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p5ch6]
 
         p5c7 = p5c3*p5c4*p5c5*p5c6
         p5c8 = p5c1*p5c2
 
 
     p5f1 = (p5c1*x-p5c3)
     p5f2 = (p5c2*x-p5c4)
     p5f3 = (x-p5c5)
     p5f4 = (x-p5c6)
     p5disp = expand(p5f1*p5f2*p5f3*p5f4)
     p5ans = (p5f1).mul(p5f2,p5f3,p5f4,hold=true)
 
 
 
 ##  Grouping Method
 if p5variant == _sage_const_3 :
     p5c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p5c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p5c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p5c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p5f1 = p5c3*x + p5c1
     p5f2 = p5c3*x - p5c1
     p5f3 = p5c4*x + p5c2
 
     p5disp = expand(p5f1*p5f2*p5f3)
     p5ans = (p5f1).mul(p5f2,p5f3,hold=true)
 
 
 
 ##  Special Forms
 if p5variant == _sage_const_4 :
     p5c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p5c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p5c2,-p5c2,p5c2**_sage_const_2 ,-p5c2**_sage_const_2 ,-p5c2**_sage_const_3 ,p5c2**_sage_const_3 ])
 
     p5f1 = (p5c2*x - p5c1)
     p5tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p5tog == _sage_const_0 :
         p5f2 = (p5c2*x + p5c1)
     else:
         p5f2 = ((p5c2*x)**_sage_const_2  + p5c2*p5c1*x + p5c1**_sage_const_2 )
 
     p5ans = p5f1.mul(p5f2,hold=true)
     p5disp = expand(p5f1*p5f2)
 
 
 
 
 
 ######  Problem p6
 
 p6variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p6variant == _sage_const_0 :
     p6c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p6c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p6f1 = x+p6c1
     p6f2 = x+p6c2
     p6disp = expand(p6f1*p6f2)
     p6ans = (p6f1).mul(p6f2,hold=true)
 
 
 ##  AC Method
 if p6variant == _sage_const_1 :
     p6c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p6c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p6c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p6c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p6f1 = p6c3*x + p6c1
     p6f2 = p6c4*x + p6c2
 
     p6disp = expand(p6f1*p6f2)
     p6ans = (p6f1).mul(p6f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p6variant == _sage_const_2 :
     p6ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p6ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p6ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p6ch1])
     p6ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p6ch2])
     p6ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p6ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p6c1 = primevec[p6ch1]
     p6c2 = primevec[p6ch2]
 
     p6c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p6ch3]
     p6c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p6ch4]
     p6c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p6ch5]
     p6c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p6ch6]
 
     p6c7 = p6c3*p6c4*p6c5*p6c6
     p6c8 = p6c1*p6c2
 
     while abs(p6c7) > _sage_const_600  or abs(p6c8) > _sage_const_15 :
         p6ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p6ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p6ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p6ch1])
         p6ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p6ch2])
         p6ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p6c1 = primevec[p6ch1]
         p6c2 = primevec[p6ch2]
 
         p6c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p6ch3]
         p6c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p6ch4]
         p6c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p6ch5]
         p6c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p6ch6]
 
         p6c7 = p6c3*p6c4*p6c5*p6c6
         p6c8 = p6c1*p6c2
 
 
     p6f1 = (p6c1*x-p6c3)
     p6f2 = (p6c2*x-p6c4)
     p6f3 = (x-p6c5)
     p6f4 = (x-p6c6)
     p6disp = expand(p6f1*p6f2*p6f3*p6f4)
     p6ans = (p6f1).mul(p6f2,p6f3,p6f4,hold=true)
 
 
 
 ##  Grouping Method
 if p6variant == _sage_const_3 :
     p6c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p6c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p6c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p6c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p6f1 = p6c3*x + p6c1
     p6f2 = p6c3*x - p6c1
     p6f3 = p6c4*x + p6c2
 
     p6disp = expand(p6f1*p6f2*p6f3)
     p6ans = (p6f1).mul(p6f2,p6f3,hold=true)
 
 
 
 ##  Special Forms
 if p6variant == _sage_const_4 :
     p6c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p6c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p6c2,-p6c2,p6c2**_sage_const_2 ,-p6c2**_sage_const_2 ,-p6c2**_sage_const_3 ,p6c2**_sage_const_3 ])
 
     p6f1 = (p6c2*x - p6c1)
     p6tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p6tog == _sage_const_0 :
         p6f2 = (p6c2*x + p6c1)
     else:
         p6f2 = ((p6c2*x)**_sage_const_2  + p6c2*p6c1*x + p6c1**_sage_const_2 )
 
     p6ans = p6f1.mul(p6f2,hold=true)
     p6disp = expand(p6f1*p6f2)
 
 
 
 
 
 ######  Problem p7
 
 p7variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p7variant == _sage_const_0 :
     p7c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p7c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p7f1 = x+p7c1
     p7f2 = x+p7c2
     p7disp = expand(p7f1*p7f2)
     p7ans = (p7f1).mul(p7f2,hold=true)
 
 
 ##  AC Method
 if p7variant == _sage_const_1 :
     p7c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p7c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p7c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p7c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p7f1 = p7c3*x + p7c1
     p7f2 = p7c4*x + p7c2
 
     p7disp = expand(p7f1*p7f2)
     p7ans = (p7f1).mul(p7f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p7variant == _sage_const_2 :
     p7ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p7ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p7ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p7ch1])
     p7ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p7ch2])
     p7ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p7ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p7c1 = primevec[p7ch1]
     p7c2 = primevec[p7ch2]
 
     p7c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p7ch3]
     p7c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p7ch4]
     p7c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p7ch5]
     p7c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p7ch6]
 
     p7c7 = p7c3*p7c4*p7c5*p7c6
     p7c8 = p7c1*p7c2
 
     while abs(p7c7) > _sage_const_600  or abs(p7c8) > _sage_const_15 :
         p7ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p7ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p7ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p7ch1])
         p7ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p7ch2])
         p7ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p7c1 = primevec[p7ch1]
         p7c2 = primevec[p7ch2]
 
         p7c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p7ch3]
         p7c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p7ch4]
         p7c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p7ch5]
         p7c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p7ch6]
 
         p7c7 = p7c3*p7c4*p7c5*p7c6
         p7c8 = p7c1*p7c2
 
 
     p7f1 = (p7c1*x-p7c3)
     p7f2 = (p7c2*x-p7c4)
     p7f3 = (x-p7c5)
     p7f4 = (x-p7c6)
     p7disp = expand(p7f1*p7f2*p7f3*p7f4)
     p7ans = (p7f1).mul(p7f2,p7f3,p7f4,hold=true)
 
 
 
 ##  Grouping Method
 if p7variant == _sage_const_3 :
     p7c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p7c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p7c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p7c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p7f1 = p7c3*x + p7c1
     p7f2 = p7c3*x - p7c1
     p7f3 = p7c4*x + p7c2
 
     p7disp = expand(p7f1*p7f2*p7f3)
     p7ans = (p7f1).mul(p7f2,p7f3,hold=true)
 
 
 
 ##  Special Forms
 if p7variant == _sage_const_4 :
     p7c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p7c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p7c2,-p7c2,p7c2**_sage_const_2 ,-p7c2**_sage_const_2 ,-p7c2**_sage_const_3 ,p7c2**_sage_const_3 ])
 
     p7f1 = (p7c2*x - p7c1)
     p7tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p7tog == _sage_const_0 :
         p7f2 = (p7c2*x + p7c1)
     else:
         p7f2 = ((p7c2*x)**_sage_const_2  + p7c2*p7c1*x + p7c1**_sage_const_2 )
 
     p7ans = p7f1.mul(p7f2,hold=true)
     p7disp = expand(p7f1*p7f2)
 
 
 
 
 
 ######  Problem p8
 
 p8variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p8variant == _sage_const_0 :
     p8c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p8c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p8f1 = x+p8c1
     p8f2 = x+p8c2
     p8disp = expand(p8f1*p8f2)
     p8ans = (p8f1).mul(p8f2,hold=true)
 
 
 ##  AC Method
 if p8variant == _sage_const_1 :
     p8c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p8c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p8c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p8c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p8f1 = p8c3*x + p8c1
     p8f2 = p8c4*x + p8c2
 
     p8disp = expand(p8f1*p8f2)
     p8ans = (p8f1).mul(p8f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p8variant == _sage_const_2 :
     p8ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p8ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p8ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p8ch1])
     p8ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p8ch2])
     p8ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p8ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p8c1 = primevec[p8ch1]
     p8c2 = primevec[p8ch2]
 
     p8c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p8ch3]
     p8c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p8ch4]
     p8c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p8ch5]
     p8c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p8ch6]
 
     p8c7 = p8c3*p8c4*p8c5*p8c6
     p8c8 = p8c1*p8c2
 
     while abs(p8c7) > _sage_const_600  or abs(p8c8) > _sage_const_15 :
         p8ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p8ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p8ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p8ch1])
         p8ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p8ch2])
         p8ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p8c1 = primevec[p8ch1]
         p8c2 = primevec[p8ch2]
 
         p8c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p8ch3]
         p8c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p8ch4]
         p8c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p8ch5]
         p8c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p8ch6]
 
         p8c7 = p8c3*p8c4*p8c5*p8c6
         p8c8 = p8c1*p8c2
 
 
     p8f1 = (p8c1*x-p8c3)
     p8f2 = (p8c2*x-p8c4)
     p8f3 = (x-p8c5)
     p8f4 = (x-p8c6)
     p8disp = expand(p8f1*p8f2*p8f3*p8f4)
     p8ans = (p8f1).mul(p8f2,p8f3,p8f4,hold=true)
 
 
 
 ##  Grouping Method
 if p8variant == _sage_const_3 :
     p8c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p8c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p8c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p8c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p8f1 = p8c3*x + p8c1
     p8f2 = p8c3*x - p8c1
     p8f3 = p8c4*x + p8c2
 
     p8disp = expand(p8f1*p8f2*p8f3)
     p8ans = (p8f1).mul(p8f2,p8f3,hold=true)
 
 
 
 ##  Special Forms
 if p8variant == _sage_const_4 :
     p8c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p8c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p8c2,-p8c2,p8c2**_sage_const_2 ,-p8c2**_sage_const_2 ,-p8c2**_sage_const_3 ,p8c2**_sage_const_3 ])
 
     p8f1 = (p8c2*x - p8c1)
     p8tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p8tog == _sage_const_0 :
         p8f2 = (p8c2*x + p8c1)
     else:
         p8f2 = ((p8c2*x)**_sage_const_2  + p8c2*p8c1*x + p8c1**_sage_const_2 )
 
     p8ans = p8f1.mul(p8f2,hold=true)
     p8disp = expand(p8f1*p8f2)
 
 
 
 
 
 ######  Problem p9
 
 p9variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p9variant == _sage_const_0 :
     p9c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p9c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p9f1 = x+p9c1
     p9f2 = x+p9c2
     p9disp = expand(p9f1*p9f2)
     p9ans = (p9f1).mul(p9f2,hold=true)
 
 
 ##  AC Method
 if p9variant == _sage_const_1 :
     p9c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p9c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p9c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p9c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p9f1 = p9c3*x + p9c1
     p9f2 = p9c4*x + p9c2
 
     p9disp = expand(p9f1*p9f2)
     p9ans = (p9f1).mul(p9f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p9variant == _sage_const_2 :
     p9ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p9ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p9ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p9ch1])
     p9ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p9ch2])
     p9ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p9ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p9c1 = primevec[p9ch1]
     p9c2 = primevec[p9ch2]
 
     p9c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p9ch3]
     p9c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p9ch4]
     p9c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p9ch5]
     p9c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p9ch6]
 
     p9c7 = p9c3*p9c4*p9c5*p9c6
     p9c8 = p9c1*p9c2
 
     while abs(p9c7) > _sage_const_600  or abs(p9c8) > _sage_const_15 :
         p9ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p9ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p9ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p9ch1])
         p9ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p9ch2])
         p9ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p9c1 = primevec[p9ch1]
         p9c2 = primevec[p9ch2]
 
         p9c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p9ch3]
         p9c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p9ch4]
         p9c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p9ch5]
         p9c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p9ch6]
 
         p9c7 = p9c3*p9c4*p9c5*p9c6
         p9c8 = p9c1*p9c2
 
 
     p9f1 = (p9c1*x-p9c3)
     p9f2 = (p9c2*x-p9c4)
     p9f3 = (x-p9c5)
     p9f4 = (x-p9c6)
     p9disp = expand(p9f1*p9f2*p9f3*p9f4)
     p9ans = (p9f1).mul(p9f2,p9f3,p9f4,hold=true)
 
 
 
 ##  Grouping Method
 if p9variant == _sage_const_3 :
     p9c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p9c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p9c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p9c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p9f1 = p9c3*x + p9c1
     p9f2 = p9c3*x - p9c1
     p9f3 = p9c4*x + p9c2
 
     p9disp = expand(p9f1*p9f2*p9f3)
     p9ans = (p9f1).mul(p9f2,p9f3,hold=true)
 
 
 
 ##  Special Forms
 if p9variant == _sage_const_4 :
     p9c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p9c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p9c2,-p9c2,p9c2**_sage_const_2 ,-p9c2**_sage_const_2 ,-p9c2**_sage_const_3 ,p9c2**_sage_const_3 ])
 
     p9f1 = (p9c2*x - p9c1)
     p9tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p9tog == _sage_const_0 :
         p9f2 = (p9c2*x + p9c1)
     else:
         p9f2 = ((p9c2*x)**_sage_const_2  + p9c2*p9c1*x + p9c1**_sage_const_2 )
 
     p9ans = p9f1.mul(p9f2,hold=true)
     p9disp = expand(p9f1*p9f2)
 
 
 
 
 
 ######  Problem p10
 
 p10variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p10variant == _sage_const_0 :
     p10c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p10c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p10f1 = x+p10c1
     p10f2 = x+p10c2
     p10disp = expand(p10f1*p10f2)
     p10ans = (p10f1).mul(p10f2,hold=true)
 
 
 ##  AC Method
 if p10variant == _sage_const_1 :
     p10c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p10c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p10c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p10c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p10f1 = p10c3*x + p10c1
     p10f2 = p10c4*x + p10c2
 
     p10disp = expand(p10f1*p10f2)
     p10ans = (p10f1).mul(p10f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p10variant == _sage_const_2 :
     p10ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p10ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p10ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p10ch1])
     p10ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p10ch2])
     p10ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p10ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p10c1 = primevec[p10ch1]
     p10c2 = primevec[p10ch2]
 
     p10c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p10ch3]
     p10c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p10ch4]
     p10c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p10ch5]
     p10c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p10ch6]
 
     p10c7 = p10c3*p10c4*p10c5*p10c6
     p10c8 = p10c1*p10c2
 
     while abs(p10c7) > _sage_const_600  or abs(p10c8) > _sage_const_15 :
         p10ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p10ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p10ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p10ch1])
         p10ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p10ch2])
         p10ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p10c1 = primevec[p10ch1]
         p10c2 = primevec[p10ch2]
 
         p10c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p10ch3]
         p10c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p10ch4]
         p10c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p10ch5]
         p10c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p10ch6]
 
         p10c7 = p10c3*p10c4*p10c5*p10c6
         p10c8 = p10c1*p10c2
 
 
     p10f1 = (p10c1*x-p10c3)
     p10f2 = (p10c2*x-p10c4)
     p10f3 = (x-p10c5)
     p10f4 = (x-p10c6)
     p10disp = expand(p10f1*p10f2*p10f3*p10f4)
     p10ans = (p10f1).mul(p10f2,p10f3,p10f4,hold=true)
 
 
 ##  Grouping Method
 if p10variant == _sage_const_3 :
     p10c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p10c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p10c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p10c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p10f1 = p10c3*x + p10c1
     p10f2 = p10c3*x - p10c1
     p10f3 = p10c4*x + p10c2
 
     p10disp = expand(p10f1*p10f2*p10f3)
     p10ans = (p10f1).mul(p10f2,p10f3,hold=true)
 
 
 
 ##  Special Forms
 if p10variant == _sage_const_4 :
     p10c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p10c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p10c2,-p10c2,p10c2**_sage_const_2 ,-p10c2**_sage_const_2 ,-p10c2**_sage_const_3 ,p10c2**_sage_const_3 ])
 
     p10f1 = (p10c2*x - p10c1)
     p10tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p10tog == _sage_const_0 :
         p10f2 = (p10c2*x + p10c1)
     else:
         p10f2 = ((p10c2*x)**_sage_const_2  + p10c2*p10c1*x + p10c1**_sage_const_2 )
 
     p10ans = p10f1.mul(p10f2,hold=true)
     p10disp = expand(p10f1*p10f2)
 
 
 
 
 
 ######  Problem p11
 
 p11variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p11variant == _sage_const_0 :
     p11c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p11c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p11f1 = x+p11c1
     p11f2 = x+p11c2
     p11disp = expand(p11f1*p11f2)
     p11ans = (p11f1).mul(p11f2,hold=true)
 
 
 ##  AC Method
 if p11variant == _sage_const_1 :
     p11c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p11c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p11c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p11c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p11f1 = p11c3*x + p11c1
     p11f2 = p11c4*x + p11c2
 
     p11disp = expand(p11f1*p11f2)
     p11ans = (p11f1).mul(p11f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p11variant == _sage_const_2 :
     p11ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p11ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p11ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p11ch1])
     p11ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p11ch2])
     p11ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p11ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p11c1 = primevec[p11ch1]
     p11c2 = primevec[p11ch2]
 
     p11c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p11ch3]
     p11c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p11ch4]
     p11c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p11ch5]
     p11c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p11ch6]
 
     p11c7 = p11c3*p11c4*p11c5*p11c6
     p11c8 = p11c1*p11c2
 
     while abs(p11c7) > _sage_const_600  or abs(p11c8) > _sage_const_15 :
         p11ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p11ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p11ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p11ch1])
         p11ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p11ch2])
         p11ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p11c1 = primevec[p11ch1]
         p11c2 = primevec[p11ch2]
 
         p11c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p11ch3]
         p11c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p11ch4]
         p11c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p11ch5]
         p11c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p11ch6]
 
         p11c7 = p11c3*p11c4*p11c5*p11c6
         p11c8 = p11c1*p11c2
 
 
     p11f1 = (p11c1*x-p11c3)
     p11f2 = (p11c2*x-p11c4)
     p11f3 = (x-p11c5)
     p11f4 = (x-p11c6)
     p11disp = expand(p11f1*p11f2*p11f3*p11f4)
     p11ans = (p11f1).mul(p11f2,p11f3,p11f4,hold=true)
 
 
 ##  Grouping Method
 if p11variant == _sage_const_3 :
     p11c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p11c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p11c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p11c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p11f1 = p11c3*x + p11c1
     p11f2 = p11c3*x - p11c1
     p11f3 = p11c4*x + p11c2
 
     p11disp = expand(p11f1*p11f2*p11f3)
     p11ans = (p11f1).mul(p11f2,p11f3,hold=true)
 
 
 
 ##  Special Forms
 if p11variant == _sage_const_4 :
     p11c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p11c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p11c2,-p11c2,p11c2**_sage_const_2 ,-p11c2**_sage_const_2 ,-p11c2**_sage_const_3 ,p11c2**_sage_const_3 ])
 
     p11f1 = (p11c2*x - p11c1)
     p11tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p11tog == _sage_const_0 :
         p11f2 = (p11c2*x + p11c1)
     else:
         p11f2 = ((p11c2*x)**_sage_const_2  + p11c2*p11c1*x + p11c1**_sage_const_2 )
 
     p11ans = p11f1.mul(p11f2,hold=true)
     p11disp = expand(p11f1*p11f2)
 
 
 
 
 
 ######  Problem p12
 
 p12variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p12variant == _sage_const_0 :
     p12c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p12c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p12f1 = x+p12c1
     p12f2 = x+p12c2
     p12disp = expand(p12f1*p12f2)
     p12ans = (p12f1).mul(p12f2,hold=true)
 
 
 ##  AC Method
 if p12variant == _sage_const_1 :
     p12c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p12c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p12c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p12c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p12f1 = p12c3*x + p12c1
     p12f2 = p12c4*x + p12c2
 
     p12disp = expand(p12f1*p12f2)
     p12ans = (p12f1).mul(p12f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p12variant == _sage_const_2 :
     p12ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p12ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p12ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p12ch1])
     p12ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p12ch2])
     p12ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p12ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p12c1 = primevec[p12ch1]
     p12c2 = primevec[p12ch2]
 
     p12c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p12ch3]
     p12c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p12ch4]
     p12c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p12ch5]
     p12c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p12ch6]
 
     p12c7 = p12c3*p12c4*p12c5*p12c6
     p12c8 = p12c1*p12c2
 
     while abs(p12c7) > _sage_const_600  or abs(p12c8) > _sage_const_15 :
         p12ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p12ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p12ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p12ch1])
         p12ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p12ch2])
         p12ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p12c1 = primevec[p12ch1]
         p12c2 = primevec[p12ch2]
 
         p12c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p12ch3]
         p12c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p12ch4]
         p12c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p12ch5]
         p12c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p12ch6]
 
         p12c7 = p12c3*p12c4*p12c5*p12c6
         p12c8 = p12c1*p12c2
 
 
     p12f1 = (p12c1*x-p12c3)
     p12f2 = (p12c2*x-p12c4)
     p12f3 = (x-p12c5)
     p12f4 = (x-p12c6)
     p12disp = expand(p12f1*p12f2*p12f3*p12f4)
     p12ans = (p12f1).mul(p12f2,p12f3,p12f4,hold=true)
 
 
 
 ##  Grouping Method
 if p12variant == _sage_const_3 :
     p12c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p12c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p12c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p12c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p12f1 = p12c3*x + p12c1
     p12f2 = p12c3*x - p12c1
     p12f3 = p12c4*x + p12c2
 
     p12disp = expand(p12f1*p12f2*p12f3)
     p12ans = (p12f1).mul(p12f2,p12f3,hold=true)
 
 
 
 ##  Special Forms
 if p12variant == _sage_const_4 :
     p12c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p12c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p12c2,-p12c2,p12c2**_sage_const_2 ,-p12c2**_sage_const_2 ,-p12c2**_sage_const_3 ,p12c2**_sage_const_3 ])
 
     p12f1 = (p12c2*x - p12c1)
     p12tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p12tog == _sage_const_0 :
         p12f2 = (p12c2*x + p12c1)
     else:
         p12f2 = ((p12c2*x)**_sage_const_2  + p12c2*p12c1*x + p12c1**_sage_const_2 )
 
     p12ans = p12f1.mul(p12f2,hold=true)
     p12disp = expand(p12f1*p12f2)
 
 
 
 
 
 ######  Problem p13
 
 p13variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p13variant == _sage_const_0 :
     p13c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p13c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p13f1 = x+p13c1
     p13f2 = x+p13c2
     p13disp = expand(p13f1*p13f2)
     p13ans = (p13f1).mul(p13f2,hold=true)
 
 
 ##  AC Method
 if p13variant == _sage_const_1 :
     p13c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p13c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p13c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p13c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p13f1 = p13c3*x + p13c1
     p13f2 = p13c4*x + p13c2
 
     p13disp = expand(p13f1*p13f2)
     p13ans = (p13f1).mul(p13f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p13variant == _sage_const_2 :
     p13ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p13ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p13ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p13ch1])
     p13ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p13ch2])
     p13ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p13ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p13c1 = primevec[p13ch1]
     p13c2 = primevec[p13ch2]
 
     p13c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p13ch3]
     p13c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p13ch4]
     p13c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p13ch5]
     p13c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p13ch6]
 
     p13c7 = p13c3*p13c4*p13c5*p13c6
     p13c8 = p13c1*p13c2
 
     while abs(p13c7) > _sage_const_600  or abs(p13c8) > _sage_const_15 :
         p13ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p13ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p13ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p13ch1])
         p13ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p13ch2])
         p13ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p13c1 = primevec[p13ch1]
         p13c2 = primevec[p13ch2]
 
         p13c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p13ch3]
         p13c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p13ch4]
         p13c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p13ch5]
         p13c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p13ch6]
 
         p13c7 = p13c3*p13c4*p13c5*p13c6
         p13c8 = p13c1*p13c2
 
 
     p13f1 = (p13c1*x-p13c3)
     p13f2 = (p13c2*x-p13c4)
     p13f3 = (x-p13c5)
     p13f4 = (x-p13c6)
     p13disp = expand(p13f1*p13f2*p13f3*p13f4)
     p13ans = (p13f1).mul(p13f2,p13f3,p13f4,hold=true)
 
 
 
 ##  Grouping Method
 if p13variant == _sage_const_3 :
     p13c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p13c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p13c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p13c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p13f1 = p13c3*x + p13c1
     p13f2 = p13c3*x - p13c1
     p13f3 = p13c4*x + p13c2
 
     p13disp = expand(p13f1*p13f2*p13f3)
     p13ans = (p13f1).mul(p13f2,p13f3,hold=true)
 
 
 
 ##  Special Forms
 if p13variant == _sage_const_4 :
     p13c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p13c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p13c2,-p13c2,p13c2**_sage_const_2 ,-p13c2**_sage_const_2 ,-p13c2**_sage_const_3 ,p13c2**_sage_const_3 ])
 
     p13f1 = (p13c2*x - p13c1)
     p13tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p13tog == _sage_const_0 :
         p13f2 = (p13c2*x + p13c1)
     else:
         p13f2 = ((p13c2*x)**_sage_const_2  + p13c2*p13c1*x + p13c1**_sage_const_2 )
 
     p13ans = p13f1.mul(p13f2,hold=true)
     p13disp = expand(p13f1*p13f2)
 
 
 
 
 
 ######  Problem p14
 
 p14variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p14variant == _sage_const_0 :
     p14c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p14c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p14f1 = x+p14c1
     p14f2 = x+p14c2
     p14disp = expand(p14f1*p14f2)
     p14ans = (p14f1).mul(p14f2,hold=true)
 
 
 ##  AC Method
 if p14variant == _sage_const_1 :
     p14c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p14c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p14c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p14c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p14f1 = p14c3*x + p14c1
     p14f2 = p14c4*x + p14c2
 
     p14disp = expand(p14f1*p14f2)
     p14ans = (p14f1).mul(p14f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p14variant == _sage_const_2 :
     p14ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p14ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p14ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p14ch1])
     p14ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p14ch2])
     p14ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p14ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p14c1 = primevec[p14ch1]
     p14c2 = primevec[p14ch2]
 
     p14c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p14ch3]
     p14c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p14ch4]
     p14c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p14ch5]
     p14c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p14ch6]
 
     p14c7 = p14c3*p14c4*p14c5*p14c6
     p14c8 = p14c1*p14c2
 
     while abs(p14c7) > _sage_const_600  or abs(p14c8) > _sage_const_15 :
         p14ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p14ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p14ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p14ch1])
         p14ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p14ch2])
         p14ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p14c1 = primevec[p14ch1]
         p14c2 = primevec[p14ch2]
 
         p14c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p14ch3]
         p14c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p14ch4]
         p14c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p14ch5]
         p14c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p14ch6]
 
         p14c7 = p14c3*p14c4*p14c5*p14c6
         p14c8 = p14c1*p14c2
 
 
     p14f1 = (p14c1*x-p14c3)
     p14f2 = (p14c2*x-p14c4)
     p14f3 = (x-p14c5)
     p14f4 = (x-p14c6)
     p14disp = expand(p14f1*p14f2*p14f3*p14f4)
     p14ans = (p14f1).mul(p14f2,p14f3,p14f4,hold=true)
 
 
 
 ##  Grouping Method
 if p14variant == _sage_const_3 :
     p14c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p14c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p14c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p14c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p14f1 = p14c3*x + p14c1
     p14f2 = p14c3*x - p14c1
     p14f3 = p14c4*x + p14c2
 
     p14disp = expand(p14f1*p14f2*p14f3)
     p14ans = (p14f1).mul(p14f2,p14f3,hold=true)
 
 
 
 ##  Special Forms
 if p14variant == _sage_const_4 :
     p14c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p14c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p14c2,-p14c2,p14c2**_sage_const_2 ,-p14c2**_sage_const_2 ,-p14c2**_sage_const_3 ,p14c2**_sage_const_3 ])
 
     p14f1 = (p14c2*x - p14c1)
     p14tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p14tog == _sage_const_0 :
         p14f2 = (p14c2*x + p14c1)
     else:
         p14f2 = ((p14c2*x)**_sage_const_2  + p14c2*p14c1*x + p14c1**_sage_const_2 )
 
     p14ans = p14f1.mul(p14f2,hold=true)
     p14disp = expand(p14f1*p14f2)
 
 
 
 
 
 ######  Problem p15
 
 p15variant = RandInt(_sage_const_0 ,_sage_const_4 )
 
 ##  Coefficient Method
 if p15variant == _sage_const_0 :
     p15c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p15c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p15f1 = x+p15c1
     p15f2 = x+p15c2
     p15disp = expand(p15f1*p15f2)
     p15ans = (p15f1).mul(p15f2,hold=true)
 
 
 ##  AC Method
 if p15variant == _sage_const_1 :
     p15c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p15c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p15c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p15c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p15f1 = p15c3*x + p15c1
     p15f2 = p15c4*x + p15c2
 
     p15disp = expand(p15f1*p15f2)
     p15ans = (p15f1).mul(p15f2, hold=true)
 
 
 
 ##  Factoring with Rational Root Theorem 1
 if p15variant == _sage_const_2 :
     p15ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
     p15ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
     p15ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p15ch1])
     p15ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p15ch2])
     p15ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
     p15ch6 = RandInt(_sage_const_0 ,_sage_const_5 )
 
     p15c1 = primevec[p15ch1]
     p15c2 = primevec[p15ch2]
 
     p15c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p15ch3]
     p15c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p15ch4]
     p15c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p15ch5]
     p15c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p15ch6]
 
     p15c7 = p15c3*p15c4*p15c5*p15c6
     p15c8 = p15c1*p15c2
 
     while abs(p15c7) > _sage_const_600  or abs(p15c8) > _sage_const_15 :
         p15ch1 = RandInt(_sage_const_0 ,_sage_const_3 )
         p15ch2 = RandInt(_sage_const_0 ,_sage_const_3 )
         p15ch3 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p15ch1])
         p15ch4 = NonZeroInt(_sage_const_0 ,_sage_const_5 ,[p15ch2])
         p15ch5 = RandInt(_sage_const_0 ,_sage_const_5 )
 
         p15c1 = primevec[p15ch1]
         p15c2 = primevec[p15ch2]
 
         p15c3 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p15ch3]
         p15c4 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p15ch4]
         p15c5 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p15ch5]
         p15c6 = (-_sage_const_1 )**(RandInt(_sage_const_0 ,_sage_const_1 ))*primevec[p15ch6]
 
         p15c7 = p15c3*p15c4*p15c5*p15c6
         p15c8 = p15c1*p15c2
 
 
     p15f1 = (p15c1*x-p15c3)
     p15f2 = (p15c2*x-p15c4)
     p15f3 = (x-p15c5)
     p15f4 = (x-p15c6)
     p15disp = expand(p15f1*p15f2*p15f3*p15f4)
     p15ans = (p15f1).mul(p15f2,p15f3,p15f4,hold=true)
 
 
 
 ##  Grouping Method
 if p15variant == _sage_const_3 :
     p15c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p15c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
     p15c3 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p15c4 = RandInt(_sage_const_1 ,_sage_const_10 )
     p15f1 = p15c3*x + p15c1
     p15f2 = p15c3*x - p15c1
     p15f3 = p15c4*x + p15c2
 
     p15disp = expand(p15f1*p15f2*p15f3)
     p15ans = (p15f1).mul(p15f2,p15f3,hold=true)
 
 
 
 ##  Special Forms
 if p15variant == _sage_const_4 :
     p15c2 = NonZeroInt(-_sage_const_5 ,_sage_const_5 )
     p15c1 = NonZeroInt(-_sage_const_10 ,_sage_const_10 ,[_sage_const_0 ,p15c2,-p15c2,p15c2**_sage_const_2 ,-p15c2**_sage_const_2 ,-p15c2**_sage_const_3 ,p15c2**_sage_const_3 ])
 
     p15f1 = (p15c2*x - p15c1)
     p15tog = RandInt(_sage_const_0 ,_sage_const_1 )
     if p15tog == _sage_const_0 :
         p15f2 = (p15c2*x + p15c1)
     else:
         p15f2 = ((p15c2*x)**_sage_const_2  + p15c2*p15c1*x + p15c1**_sage_const_2 )
 
     p15ans = p15f1.mul(p15f2,hold=true)
     p15disp = expand(p15f1*p15f2)
 
 
 
 
 
 
 
except:
 _st_.goboom(_sage_const_1677 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_1759 
 _st_.inline(_sage_const_0 , latex(p1disp))
except:
 _st_.goboom(_sage_const_1759 )
try:
 _st_.current_tex_line = _sage_const_1759 
 _st_.inline(_sage_const_1 , latex(p1ans))
except:
 _st_.goboom(_sage_const_1759 )
try:
 _st_.current_tex_line = _sage_const_1770 
 _st_.inline(_sage_const_2 , latex(p2disp))
except:
 _st_.goboom(_sage_const_1770 )
try:
 _st_.current_tex_line = _sage_const_1770 
 _st_.inline(_sage_const_3 , latex(p2ans))
except:
 _st_.goboom(_sage_const_1770 )
try:
 _st_.current_tex_line = _sage_const_1781 
 _st_.inline(_sage_const_4 , latex(p3disp))
except:
 _st_.goboom(_sage_const_1781 )
try:
 _st_.current_tex_line = _sage_const_1781 
 _st_.inline(_sage_const_5 , latex(p3ans))
except:
 _st_.goboom(_sage_const_1781 )
try:
 _st_.current_tex_line = _sage_const_1792 
 _st_.inline(_sage_const_6 , latex(p4disp))
except:
 _st_.goboom(_sage_const_1792 )
try:
 _st_.current_tex_line = _sage_const_1792 
 _st_.inline(_sage_const_7 , latex(p4ans))
except:
 _st_.goboom(_sage_const_1792 )
try:
 _st_.current_tex_line = _sage_const_1803 
 _st_.inline(_sage_const_8 , latex(p5disp))
except:
 _st_.goboom(_sage_const_1803 )
try:
 _st_.current_tex_line = _sage_const_1803 
 _st_.inline(_sage_const_9 , latex(p5ans))
except:
 _st_.goboom(_sage_const_1803 )
try:
 _st_.current_tex_line = _sage_const_1814 
 _st_.inline(_sage_const_10 , latex(p6disp))
except:
 _st_.goboom(_sage_const_1814 )
try:
 _st_.current_tex_line = _sage_const_1814 
 _st_.inline(_sage_const_11 , latex(p6ans))
except:
 _st_.goboom(_sage_const_1814 )
try:
 _st_.current_tex_line = _sage_const_1825 
 _st_.inline(_sage_const_12 , latex(p7disp))
except:
 _st_.goboom(_sage_const_1825 )
try:
 _st_.current_tex_line = _sage_const_1825 
 _st_.inline(_sage_const_13 , latex(p7ans))
except:
 _st_.goboom(_sage_const_1825 )
try:
 _st_.current_tex_line = _sage_const_1836 
 _st_.inline(_sage_const_14 , latex(p8disp))
except:
 _st_.goboom(_sage_const_1836 )
try:
 _st_.current_tex_line = _sage_const_1836 
 _st_.inline(_sage_const_15 , latex(p8ans))
except:
 _st_.goboom(_sage_const_1836 )
try:
 _st_.current_tex_line = _sage_const_1847 
 _st_.inline(_sage_const_16 , latex(p9disp))
except:
 _st_.goboom(_sage_const_1847 )
try:
 _st_.current_tex_line = _sage_const_1847 
 _st_.inline(_sage_const_17 , latex(p9ans))
except:
 _st_.goboom(_sage_const_1847 )
try:
 _st_.current_tex_line = _sage_const_1858 
 _st_.inline(_sage_const_18 , latex(p10disp))
except:
 _st_.goboom(_sage_const_1858 )
try:
 _st_.current_tex_line = _sage_const_1858 
 _st_.inline(_sage_const_19 , latex(p10ans))
except:
 _st_.goboom(_sage_const_1858 )
try:
 _st_.current_tex_line = _sage_const_1869 
 _st_.inline(_sage_const_20 , latex(p11disp))
except:
 _st_.goboom(_sage_const_1869 )
try:
 _st_.current_tex_line = _sage_const_1869 
 _st_.inline(_sage_const_21 , latex(p11ans))
except:
 _st_.goboom(_sage_const_1869 )
try:
 _st_.current_tex_line = _sage_const_1880 
 _st_.inline(_sage_const_22 , latex(p12disp))
except:
 _st_.goboom(_sage_const_1880 )
try:
 _st_.current_tex_line = _sage_const_1880 
 _st_.inline(_sage_const_23 , latex(p12ans))
except:
 _st_.goboom(_sage_const_1880 )
try:
 _st_.current_tex_line = _sage_const_1891 
 _st_.inline(_sage_const_24 , latex(p13disp))
except:
 _st_.goboom(_sage_const_1891 )
try:
 _st_.current_tex_line = _sage_const_1891 
 _st_.inline(_sage_const_25 , latex(p13ans))
except:
 _st_.goboom(_sage_const_1891 )
try:
 _st_.current_tex_line = _sage_const_1902 
 _st_.inline(_sage_const_26 , latex(p14disp))
except:
 _st_.goboom(_sage_const_1902 )
try:
 _st_.current_tex_line = _sage_const_1902 
 _st_.inline(_sage_const_27 , latex(p14ans))
except:
 _st_.goboom(_sage_const_1902 )
try:
 _st_.current_tex_line = _sage_const_1913 
 _st_.inline(_sage_const_28 , latex(p15disp))
except:
 _st_.goboom(_sage_const_1913 )
try:
 _st_.current_tex_line = _sage_const_1913 
 _st_.inline(_sage_const_29 , latex(p15ans))
except:
 _st_.goboom(_sage_const_1913 )
_st_.endofdoc()

