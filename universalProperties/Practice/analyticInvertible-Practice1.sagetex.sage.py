## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file analyticInvertible-Practice1.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_62 = Integer(62); _sage_const_5 = Integer(5); _sage_const_74 = Integer(74); _sage_const_84 = Integer(84); _sage_const_86 = Integer(86); _sage_const_4 = Integer(4); _sage_const_64 = Integer(64); _sage_const_10 = Integer(10); _sage_const_59 = Integer(59); _sage_const_76 = Integer(76)## This file (analyticInvertible-Practice1.sagetex.sage) was *autogenerated* from analyticInvertible-Practice1.tex with sagetex.sty version 2015/08/26 v3.0-92d9f7a.
import sagetex
_st_ = sagetex.SageTeXProcessor('analyticInvertible-Practice1', version='2015/08/26 v3.0-92d9f7a', version_check=True)
_st_.current_tex_line = _sage_const_10 
_st_.blockbegin()
try:
 def RandInt(a,b):
     """ Returns a random integer in [`a`,`b`]. Note that `a` and `b` should be integers themselves to avoid unexpected behavior.
     """
     return QQ(randint(int(a),int(b)))
     # return choice(range(a,b+1))
 
 def NonZeroInt(b,c, avoid = [_sage_const_0 ]):
     """ Returns a random integer in [`b`,`c`] which is not in `av`.
         If `av` is not specified, defaults to a non-zero integer.
     """
     while True:
         a = RandInt(b,c)
         if a not in avoid:
             return a
 
 
 funcvec = [x, x**_sage_const_3 , x**_sage_const_5 ]
 ansvec = [x, x**(_sage_const_1 /_sage_const_3 ), x**(_sage_const_1 /_sage_const_5 )]
 
 p1choice1 = RandInt(_sage_const_0 ,_sage_const_2 )
 p1f1t = funcvec[p1choice1]
 p1c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p1c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p1f1 = p1f1t(x=(x - p1c1)) + p1c2
 p1invt = ansvec[p1choice1]
 p1ans1 = p1invt(x=(x-p1c2))+p1c1
 
 
 p2choice1 = RandInt(_sage_const_0 ,_sage_const_2 )
 p2f1t = funcvec[p2choice1]
 p2c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p2c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p2f1 = p2f1t(x=(x - p2c1)) + p2c2
 p2invt = ansvec[p2choice1]
 p2ans1 = p2invt(x=(x-p2c2))+p2c1
 
 
 p3choice1 = RandInt(_sage_const_0 ,_sage_const_2 )
 p3f1t = funcvec[p3choice1]
 p3c1 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p3c2 = RandInt(-_sage_const_10 ,_sage_const_10 )
 p3f1 = p3f1t(x=(x - p3c1)) + p3c2
 p3invt = ansvec[p3choice1]
 p3ans1 = p3invt(x=(x-p3c2))+p3c1
 
 
 
 
except:
 _st_.goboom(_sage_const_59 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_62 
 _st_.inline(_sage_const_0 , latex(p1f1))
except:
 _st_.goboom(_sage_const_62 )
try:
 _st_.current_tex_line = _sage_const_64 
 _st_.inline(_sage_const_1 , latex(p1ans1))
except:
 _st_.goboom(_sage_const_64 )
try:
 _st_.current_tex_line = _sage_const_74 
 _st_.inline(_sage_const_2 , latex(p2f1))
except:
 _st_.goboom(_sage_const_74 )
try:
 _st_.current_tex_line = _sage_const_76 
 _st_.inline(_sage_const_3 , latex(p2ans1))
except:
 _st_.goboom(_sage_const_76 )
try:
 _st_.current_tex_line = _sage_const_84 
 _st_.inline(_sage_const_4 , latex(p3f1))
except:
 _st_.goboom(_sage_const_84 )
try:
 _st_.current_tex_line = _sage_const_86 
 _st_.inline(_sage_const_5 , latex(p3ans1))
except:
 _st_.goboom(_sage_const_86 )
_st_.endofdoc()

